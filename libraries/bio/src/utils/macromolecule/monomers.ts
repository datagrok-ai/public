import * as DG from 'datagrok-api/dg';

import BitArray from '@datagrok-libraries/utils/src/bit-array';
import {tanimotoSimilarity} from '@datagrok-libraries/ml/src/distance-metrics-methods';

const naturalAASmiles = {
  A: 'C[C@H](N)C(=O)O',
  C: 'N[C@@H](CS)C(=O)O',
  D: 'N[C@@H](CC(=O)O)C(=O)O',
  E: 'N[C@@H](CCC(=O)O)C(=O)O',
  F: 'N[C@@H](Cc1ccccc1)C(=O)O',
  G: 'NCC(=O)O',
  H: 'N[C@@H](Cc1cnc[nH]1)C(=O)O',
  I: 'CC[C@H](C)[C@H](N)C(=O)O',
  K: 'NCCCC[C@H](N)C(=O)O',
  L: 'CC(C)C[C@H](N)C(=O)O',
  M: 'CSCC[C@H](N)C(=O)O',
  N: 'NC(=O)C[C@H](N)C(=O)O',
  P: 'O=C(O)[C@@H]1CCCN1',
  Q: 'NC(=O)CC[C@H](N)C(=O)O',
  R: 'N=C(N)NCCC[C@H](N)C(=O)O',
  S: 'N[C@@H](CO)C(=O)O',
  T: 'C[C@@H](O)[C@H](N)C(=O)O',
  V: 'CC(C)[C@H](N)C(=O)O',
  W: 'N[C@@H](Cc1c[nH]c2ccccc12)C(=O)O',
  Y: 'N[C@@H](Cc1ccc(O)cc1)C(=O)O',
}; // canonical smiles of canonical amino acids

const naturalAAFps = {
  A: new BitArray(
    new Uint32Array([
      2, 0, 0, 0, 16, 0, 0, 0, 134217728, 0, 0, 0, 32, 0, 33554432, 0, 0, 0, 0,
      0, 1024, 0, 0, 0, 262144, 128, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 524288, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1048576, 0,
      536870912, 0, 0, 0, 0,
    ]),
    2048
  ),
  C: new BitArray(
    new Uint32Array([
      2, 0, 65536, 0, 0, 0, 0, 32, 0, 0, 2, 0, 32, 0, 0, 0, 0, 0, 0, 0, 1024, 0,
      0, 0, 262144, 128, 0, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 524288, 0, 0, 0, 0,
      0, 0, 0, 524288, 524288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34603008, 0,
      536870912, 64, 0, 0, 0,
    ]),
    2048
  ),
  D: new BitArray(
    new Uint32Array([
      2, 0, 65600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 1024, 0,
      0, 0, 262400, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2097152, 524288, 0, 0, 0,
      1024, 0, 0, 0, 524288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512, 0, 0, 34603008, 0,
      536870912, 0, 0, 0, 0,
    ]),
    2048
  ),
  E: new BitArray(
    new Uint32Array([
      2, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 1024, 0,
      0, 8, 262144, 128, 0, 0, 16, 134217728, 0, 0, 0, 0, 0, 0, 524288, 0, 0, 0,
      128, 0, 0, 0, 524288, 0, 0, 0, 268435456, 0, 0, 0, 0, 0, 512, 2147483648,
      0, 34603008, 0, 536870912, 0, 0, 0, 0,
    ]),
    2048
  ),
  F: new BitArray(
    new Uint32Array([
      2, 0, 98304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 1024, 0,
      0, 0, 262144, 128, 33554432, 0, 0, 0, 0, 33554432, 0, 1024, 1, 0, 524288,
      32768, 32, 0, 0, 0, 0, 16, 524288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71303168, 0,
      0, 34603008, 131072, 536870912, 0, 0, 0, 0,
    ]),
    2048
  ),
  G: new BitArray(
    new Uint32Array([
      134217728, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
      1024, 0, 0, 0, 0, 128, 0, 0, 0, 0, 2097216, 0, 0, 0, 0, 0, 524288, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512, 0, 0, 0, 0, 536870912,
      0, 0, 0, 0,
    ]),
    2048
  ),
  H: new BitArray(
    new Uint32Array([
      2, 0, 1073840128, 0, 0, 0, 0, 0, 0, 0, 0, 67108864, 32, 0, 0, 0, 0, 0, 0,
      0, 1024, 0, 512, 0, 262144, 192, 0, 268435456, 0, 0, 8200, 0, 0, 0,
      67108864, 0, 524296, 0, 32, 0, 0, 0, 0, 16, 524288, 0, 0, 2147483648, 0,
      0, 8, 0, 0, 0, 0, 0, 0, 34603008, 131072, 536870920, 4194304, 0, 0, 0,
    ]),
    2048
  ),
  I: new BitArray(
    new Uint32Array([
      2, 0, 65536, 0, 0, 0, 0, 0, 150994944, 64, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
      1024, 0, 8388608, 0, 327680, 128, 0, 0, 0, 0, 0, 0, 0, 2, 0, 524288,
      524288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 8388608, 0,
      33554432, 0, 1048576, 0, 536870912, 0, 0, 0, 0,
    ]),
    2048
  ),
  K: new BitArray(
    new Uint32Array([
      2, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268435488, 0, 0, 0, 0, 0, 0, 0,
      1024, 0, 0, 8, 262144, 128, 0, 0, 0, 0, 2097152, 0, 0, 67108864, 0, 0,
      524288, 0, 0, 0, 8, 0, 0, 0, 524288, 0, 0, 8192, 0, 0, 0, 0, 0, 0, 0,
      2147483648, 0, 34668544, 0, 545259520, 0, 0, 0, 0,
    ]),
    2048
  ),
  L: new BitArray(
    new Uint32Array([
      2, 0, 65536, 0, 0, 0, 0, 0, 134217728, 0, 0, 0, 32, 512, 0, 0, 0, 0, 0, 0,
      1024, 256, 0, 8388608, 262400, 128, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 524288,
      0, 0, 0, 0, 0, 0, 0, 524288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42991616,
      0, 536870912, 0, 0, 0, 0,
    ]),
    2048
  ),
  M: new BitArray(
    new Uint32Array([
      2050, 0, 65536, 1048576, 0, 0, 0, 0, 0, 0, 0, 0, 1056, 0, 0, 0, 0, 0, 0,
      0, 1024, 0, 0, 8, 262144, 128, 0, 0, 0, 0, 0, 536870912, 0, 2, 0, 0,
      1074266112, 0, 0, 0, 0, 0, 0, 0, 524288, 0, 0, 0, 4194304, 0, 0, 0, 0, 0,
      0, 2147483648, 0, 34603008, 0, 536870912, 4194304, 0, 0, 0,
    ]),
    2048
  ),
  N: new BitArray(
    new Uint32Array([
      2, 0, 65536, 0, 4096, 0, 0, 0, 0, 0, 0, 16777216, 32, 0, 0, 0, 0, 0, 0, 0,
      1024, 0, 0, 0, 262400, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 524288, 0, 0, 0,
      1024, 0, 0, 0, 524288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34603008, 0,
      536871936, 67108864, 0, 0, 0,
    ]),
    2048
  ),
  P: new BitArray(
    new Uint32Array([
      0, 0, 1024, 0, 0, 0, 0, 0, 0, 131072, 0, 1024, 32, 0, 0, 0, 0, 512, 0, 0,
      1024, 0, 0, 64, 0, 128, 0, 0, 1073741824, 0, 0, 138412032, 16, 0,
      67108864, 0, 0, 0, 0, 0, 0, 8192, 0, 0, 8388608, 0, 0, 8, 0, 0, 0, 0, 0,
      0, 256, 0, 0, 0, 0, 553648128, 0, 0, 0, 0,
    ]),
    2048
  ),
  Q: new BitArray(
    new Uint32Array([
      2, 0, 65536, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 2, 0, 0, 1024,
      0, 0, 8, 262144, 128, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 524288, 0, 0, 0, 0,
      0, 0, 0, 524288, 0, 0, 0, 268435456, 0, 0, 0, 0, 0, 16777216, 2147483648,
      0, 34603008, 0, 536871936, 0, 0, 0, 0,
    ]),
    2048
  ),
  R: new BitArray(
    new Uint32Array([
      2, 0, 65536, 0, 4096, 0, 32, 0, 0, 0, 0, 0, 268435488, 0, 0, 0, 0, 0, 0,
      32768, 134218752, 0, 16, 8, 262144, 128, 0, 1073741824, 0, 0, 8388608, 0,
      0, 0, 65536, 0, 524289, 0, 0, 0, 0, 0, 0, 0, 524288, 2048, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 2147483648, 0, 34603008, 1048576, 545259520, 0, 0, 0, 0,
    ]),
    2048
  ),
  S: new BitArray(
    new Uint32Array([
      2, 0, 65536, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 32, 0, 0, 4, 0, 0, 0, 0,
      1024, 0, 0, 0, 262144, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 524288, 0, 0,
      1048576, 0, 0, 0, 0, 524288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8388608, 0, 0,
      34603008, 0, 536870912, 0, 0, 0, 0,
    ]),
    2048
  ),
  T: new BitArray(
    new Uint32Array([
      2, 0, 0, 0, 0, 0, 0, 8, 134217728, 0, 0, 67108864, 32, 0, 0, 0, 0, 0, 0,
      0, 1024, 0, 8388608, 0, 262144, 128, 0, 0, 0, 0, 0, 0, 0, 2, 0, 524288,
      524288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0, 0, 0,
      0, 1048576, 67108864, 536870912, 0, 0, 0, 0,
    ]),
    2048
  ),
  V: new BitArray(
    new Uint32Array([
      2, 0, 0, 0, 0, 0, 0, 0, 134217728, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 1024,
      0, 8388608, 0, 262144, 128, 0, 0, 0, 0, 0, 1073741824, 128, 2, 0, 524288,
      524288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8192, 0,
      1048576, 0, 536870912, 0, 0, 0, 0,
    ]),
    2048
  ),
  W: new BitArray(
    new Uint32Array([
      2, 0, 98304, 8388608, 0, 0, 0, 0, 0, 0, 256, 4096, 32, 0, 0, 0, 0, 0, 0,
      0, 1024, 0, 0, 0, 262144, 192, 0, 0, 0, 0, 0, 0, 0, 0, 67108865, 0,
      524288, 32768, 32, 0, 0, 0, 8224, 16, 524288, 0, 0, 0, 0, 32, 128, 0,
      2097152, 0, 4194304, 8388608, 0, 34603008, 8519680, 536870912, 131072,
      262144, 0, 0,
    ]),
    2048
  ),
  Y: new BitArray(
    new Uint32Array([
      2, 0, 98304, 0, 0, 0, 0, 0, 0, 4194304, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
      1024, 0, 0, 512, 262144, 128, 33554432, 0, 0, 0, 0, 33554432, 0, 0, 0, 0,
      524288, 0, 32, 0, 0, 2, 0, 16, 524288, 0, 0, 0, 0, 0, 4, 0, 0, 0,
      71303168, 262144, 0, 34603008, 131072, 536870912, 0, 0, 0, 0,
    ]),
    2048
  ),
};

const naturalRNASmiles = {
  A: 'Nc1ncnc2[nH]cnc12',
  C: 'Nc1cc[nH]c(=O)n1',
  G: 'Nc1nc2[nH]cnc2c(=O)[nH]1',
  T: 'Cc1c[nH]c(=O)[nH]c1=O',
  U: 'O=c1cc[nH]c(=O)[nH]1',
}; // canonical smiles of canonical NAs

const naturalRNAFps = {
  A: new BitArray(
    new Uint32Array([
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1024, 0, 67108864, 0, 0, 0, 512, 0, 0, 0,
      8388608, 0, 0, 512, 0, 0, 64, 4, 0, 0, 0, 4, 0, 0, 0, 67108864, 0, 524289,
      0, 0, 0, 0, 0, 0, 16, 0, 659456, 0, 256, 0, 16, 0, 0, 0, 268435456, 0, 0,
      262144, 0, 131072, 0, 0, 0, 8388608, 0,
    ]),
    2048
  ),
  C: new BitArray(
    new Uint32Array([
      0, 1073741824, 0, 0, 0, 0, 0, 2147483648, 4, 67108864, 0, 67108864, 0, 256,
      0, 0, 0, 0, 0, 0, 1024, 0, 128, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 67108864,
      0, 524289, 0, 65536, 0, 0, 0, 0, 16, 0, 131072, 0, 4, 0, 0, 0, 0, 0, 0,
      4194304, 0, 0, 2147483648, 131072, 0, 4096, 0, 0, 0,
    ]),
    2048
  ),
  G: new BitArray(
    new Uint32Array([
      0, 0, 0, 0, 1024, 0, 0, 0, 0, 67109888, 16384, 67108864, 0, 0, 0, 0, 0, 0,
      0, 33562624, 1024, 33554432, 512, 16384, 0, 64, 4, 0, 0, 33554432, 0, 0, 0,
      0, 67108864, 0, 524289, 0, 0, 0, 0, 0, 0, 16, 0, 135168, 0, 268435456, 0, 0,
      0, 0, 0, 268435456, 131072, 0, 0, 2147483648, 131072, 0, 0, 0, 8388608, 0,
    ]),
    2048
  ),
  T: new BitArray(
    new Uint32Array([
      8388608, 0, 0, 0, 0, 0, 0, 0, 0, 67108864, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0,
      1024, 0, 0, 16384, 0, 64, 0, 0, 0, 0, 0, 0, 0, 2, 67108864, 0, 0, 0, 0, 0,
      0, 0, 0, 40976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67108864, 131072, 524288, 0, 0,
      8519680, 0, 1, 33554432, 1048576, 0,
    ]),
    2048
  ),
  U: new BitArray(
    new Uint32Array([
      0, 0, 131072, 1073741824, 0, 0, 0, 0, 0, 67108864, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1024, 0, 128, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 32768, 67108864, 0, 0, 0,
      0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 2048, 0, 0, 0, 4341760, 0, 0, 0,
      131072, 0, 0, 33554432, 1048576, 0,
    ]),
    2048
  ),
};

export const naturalMonomers = {
  RNA: naturalRNASmiles,
  PEPTIDE: naturalAASmiles,
};

export const naturalMonomerFps = {
  RNA: naturalRNAFps,
  PEPTIDE: naturalAAFps,
};

export async function getMorganFingerprint(molString: string) {
  const func = DG.Func.find({
    package: 'Chem',
    name: 'getMorganFingerprint',
  })?.[0];
  if (!func) return null;
  try {
    const res: ArrayBuffer | null = (
      await func.apply({molString})
    )?.getBuffer().buffer;
    if (res) return new BitArray(new Uint32Array(res), 2048);
  } catch (_e) {
    return null;
  }
}

export async function mostSimilarNaturalAnalog(molString: string, monomerType: string, threshold = 0) {
  if (!Object.keys(naturalMonomerFps).includes(monomerType))
    return null;
  const morganFp = await getMorganFingerprint(molString);
  if (!morganFp) return null;
  if (!naturalMonomerFps[monomerType as keyof typeof naturalMonomerFps])
    return null;
  const naturalFps = naturalMonomerFps[monomerType as keyof typeof naturalMonomerFps];
  let maxSim = 0;
  let mostSimilar = null;
  for (const [name, fp] of Object.entries(naturalFps)) {
    const sim = tanimotoSimilarity(morganFp, fp);
    if (sim > maxSim && sim >= threshold) {
      maxSim = sim;
      mostSimilar = name;
    }
  }
  return mostSimilar;
}
