---
AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  AccessFromInternetSubnetAllow2:
    Fn::Not:
    - Fn::Equals:
      - Ref: InternetSubnetAllow2
      - ''
  AccessFromInternetSubnetAllow3:
    Fn::Not:
    - Fn::Equals:
      - Ref: InternetSubnetAllow3
      - ''
  AccessFromNatGW:
    Fn::And:
    - Condition: InternetIngressAccess
    - Condition: InternetEgressAccess
  CreatePublicSubnets:
    Fn::Or:
    - Condition: InternetIngressAccess
    - Condition: InternetEgressAccess
  CreateVPC:
    Fn::Equals:
    - create
    - create
  InternetEgressAccess:
    Fn::Equals:
    - 'true'
    - 'true'
  InternetIngressAccess:
    Fn::Equals:
    - Ref: InternetIngressAccess
    - 'true'
  UseVPCEndpoint:
    Fn::Equals:
    - 'true'
    - 'true'
Description: Datagrok template to deploy all components to ECS Fargate. DNS and ACM
  should be configured manually.
Mappings:
  Images:
    Datagrok:
      domain: 709825985650.dkr.ecr.us-east-1.amazonaws.com
      repo: datagrok/datagrok
    GrokConnect:
      domain: 709825985650.dkr.ecr.us-east-1.amazonaws.com
      repo: datagrok/grok_connect
    GrokPipe:
      domain: 709825985650.dkr.ecr.us-east-1.amazonaws.com
      repo: datagrok/grok_pipe
    GrokSpawner:
      domain: 709825985650.dkr.ecr.us-east-1.amazonaws.com
      repo: datagrok/grok_spawner
    JKG:
      domain: 709825985650.dkr.ecr.us-east-1.amazonaws.com
      repo: datagrok/jupyter_kernel_gateway
    Kaniko:
      domain: 709825985650.dkr.ecr.us-east-1.amazonaws.com
      repo: datagrok/kaniko
      version: v1.12.1
    Rabbitmq:
      domain: 709825985650.dkr.ecr.us-east-1.amazonaws.com
      repo: datagrok/rabbitmq
    Searchdomain:
      domain: 709825985650.dkr.ecr.us-east-1.amazonaws.com
      repo: datagrok/ecs-searchdomain-sidecar
      version: '1.0'
    Smtp:
      domain: 709825985650.dkr.ecr.us-east-1.amazonaws.com
      repo: datagrok/smtp
      version: 1.0.0
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network configuration
      Parameters:
      - CIDR
      - InternetIngressAccess
    - Label:
        default: Access configuration
      Parameters:
      - InternetSubnetAllow
      - InternetSubnetAllow2
      - InternetSubnetAllow3
    - Label:
        default: Client Endpoint configuration
      Parameters:
      - DatagrokArnSSLCertificate
    - Label:
        default: Service version
      Parameters:
      - DatagrokVersion
      - GrokConnectVersion
      - GrokPipeVersion
      - RabbitmqVersion
      - GrokSpawnerVersion
      - JKGVersion
    ParameterLabels:
      CIDR:
        default: 'CIDR: VPC CIDR'
      DatagrokArnSSLCertificate:
        default: 'DatagrokArnSSLCertificate: AWS ACM certificate ARN'
      DatagrokVersion:
        default: Datagrok Version
      GrokConnectVersion:
        default: Grok Connect Version
      GrokPipeVersion:
        default: Grok Pipe Version
      GrokSpawnerVersion:
        default: Grok Spawner Version
      InternetIngressAccess:
        default: 'InternetIngressAccess: Access from internet'
      InternetSubnetAllow:
        default: 'InternetSubnetAllow: Allow connect from CIDR'
      InternetSubnetAllow2:
        default: 'InternetSubnetAllow2: Allow connect from additional CIDR (Optional)'
      InternetSubnetAllow3:
        default: 'InternetSubnetAllow3: Allow connect from additional CIDR (Optional)'
      JKGVersion:
        default: Jupyter Kernel Gateway Version
      RabbitmqVersion:
        default: RabbitMQ Version
  cfn-lint:
    config:
      ignore_checks:
      - W8001
      - W8003
Outputs:
  DatagrokAdminPassword:
    Description: Admin password for first login
    Value:
      Fn::Sub:
      - https://${AWS::Region}.console.aws.amazon.com/secretsmanager/home?region=${AWS::Region}#!/secret?name=${secret}
      - secret:
          Ref: DatagrokAdminPassword
  DatagrokEndpoint:
    Description: Datagrok endpoint
    Value: Create DNS records for Datagrok using stated DNS Names as CNAMEs targets
  DatagrokLoadBalancerDNSName:
    Description: Datagrok Load Balancer DNS to create CNAME record
    Value:
      Fn::GetAtt:
      - DatagrokLoadBalancer
      - DNSName
Parameters:
  CIDR:
    AllowedPattern: '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+'
    Default: 10.0.0.0/17
    Description: CIDR block for the new Datagrok VPC
    Type: String
  DatagrokArnSSLCertificate:
    AllowedPattern: (arn:([^:\n]*):([^:\n]*):([^:\n]*):([^:\n]*):(([^:\/\n]*)[:\/])?(.*))?
    Description: The certificate is used for both Datagrok endpoint. If you do not
      use Route53 for DNS management, it is required to upload certificate to AWS
      ACM manually (https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html)
      and specify the Certificate ARN here.
    Type: String
  DatagrokVersion:
    AllowedPattern: ([0-9]+\.[0-9]+\.[0-9]+)|latest|stable|bleeding-edge
    Default: 1.25.3
    Description: Enter Datagrok docker image version.
    Type: String
  GrokConnectVersion:
    AllowedPattern: ([0-9]+\.[0-9]+\.[0-9]+)|latest|bleeding-edge
    Default: 2.3.30
    Description: Enter Grok Connect docker image version.
    Type: String
  GrokPipeVersion:
    AllowedPattern: ([0-9]+\.[0-9]+\.[0-9]+)|latest|bleeding-edge
    Default: 1.0.1
    Description: Enter Grok Pipe docker image version.
    Type: String
  GrokSpawnerVersion:
    AllowedPattern: ([0-9]+\.[0-9]+\.[0-9]+)|latest|bleeding-edge
    Default: 1.10.1
    Description: Enter Grok Spawner docker image version.
    Type: String
  InternetIngressAccess:
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'true'
    Description: 'Do you want Datagrok to be available from internet? The exact subnet
      from which Datagrok will be available can be specified in ''InternetSubnetAllow:
      Allow connect to Datagrok from CIDR'' parameter.'
    Type: String
  InternetSubnetAllow:
    AllowedPattern: '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+'
    Description: Subnet for access to Datagrok endpoint. Set CIDR to 0.0.0.0/0 to
      allow all IP addresses access, or another CIDR range.
    Type: String
  InternetSubnetAllow2:
    AllowedPattern: (^$)|([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+)
    Default: ''
    Description: Additional subnet for access to Datagrok endpoint. You can omit this
      parameter is already specified InternetSubnetAllow.
    Type: String
  InternetSubnetAllow3:
    AllowedPattern: (^$)|([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+)
    Default: ''
    Description: Additional subnet for access to Datagrok endpoint. You can omit this
      parameter is already specified InternetSubnetAllow.
    Type: String
  JKGVersion:
    AllowedPattern: ([0-9]+\.[0-9]+\.[0-9]+)|latest|bleeding-edge
    Default: 1.14.0
    Description: Enter Datagrok Jupyter Kernel Gateway docker image version.
    Type: String
  RabbitmqVersion:
    Default: 4.0.5-management
    Description: Enter rabbitmq docker image version.
    Type: String
Resources:
  CvmALBIntSecurityGroup:
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName} Datagrok CVM ALB Internal Security Group
      SecurityGroupEgress:
      - Description:
          Fn::Sub: ${AWS::StackName} CVM egress rules
        DestinationSecurityGroupId:
          Ref: CvmSecurityGroup
        FromPort: 0
        IpProtocol: TCP
        ToPort: 65535
      SecurityGroupIngress:
      - Description:
          Fn::Sub: ${AWS::StackName} Allow internal connections from Datagrok to CVM
        FromPort: 8090
        IpProtocol: TCP
        SourceSecurityGroupId:
          Ref: DatagrokSecurityGroup
        ToPort: 8090
      - Description:
          Fn::Sub: ${AWS::StackName} Allow internal connections to HTTP
        FromPort: 80
        IpProtocol: TCP
        SourceSecurityGroupId:
          Ref: DatagrokSecurityGroup
        ToPort: 80
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-cvm-alb-int
      - Key: datagrok.component
        Value: cvm
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::SecurityGroup
  CvmCluster:
    Properties:
      ClusterName:
        Fn::Sub: ${AWS::StackName}-cvm
      ClusterSettings:
      - Name: containerInsights
        Value: enabled
      Tags:
      - Key: datagrok.component
        Value: cvm
    Type: AWS::ECS::Cluster
  CvmEgress:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} CVM egress rules
      DestinationSecurityGroupId:
        Ref: CvmSecurityGroup
      FromPort: 0
      GroupId:
        Ref: CvmALBIntSecurityGroup
      IpProtocol: TCP
      ToPort: 65535
    Type: AWS::EC2::SecurityGroupEgress
  CvmInsightsLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub:
        - /aws/ecs/containerinsights/${cluster_name}/performance
        - cluster_name:
            Ref: CvmCluster
      RetentionInDays: 1
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
  CvmSecurityGroup:
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName} Datagrok CVM Security Group
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-cvm
      - Key: datagrok.component
        Value: cvm
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::SecurityGroup
  CvmSecurityGroupALBIntCommunications:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Allow communication from internal ALB to CVM components
      GroupId:
        Ref: CvmSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId:
        Ref: CvmALBIntSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
  CvmSecurityGroupCommunications:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Allow communication from Datagrok to CVM components
      GroupId:
        Ref: CvmSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId:
        Ref: DatagrokSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
  CvmSecurityGroupInternalCommunications:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Allow communication within network CVM
      GroupId:
        Ref: CvmSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId:
        Ref: CvmSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
  Datagrok443Ingress:
    Properties:
      CidrIp:
        Ref: InternetSubnetAllow
      Description:
        Fn::Sub: ${AWS::StackName} 443/tcp on Datagrok ALB for Datagrok Server
      FromPort: 443
      GroupId:
        Ref: DatagrokALBSecurityGroup
      IpProtocol: TCP
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress
  Datagrok443Ingress2:
    Condition: AccessFromInternetSubnetAllow2
    Properties:
      CidrIp:
        Ref: InternetSubnetAllow2
      Description:
        Fn::Sub: ${AWS::StackName} 443/tcp on Datagrok ALB for Datagrok Server
      FromPort: 443
      GroupId:
        Ref: DatagrokALBSecurityGroup
      IpProtocol: TCP
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress
  Datagrok443Ingress3:
    Condition: AccessFromInternetSubnetAllow3
    Properties:
      CidrIp:
        Ref: InternetSubnetAllow3
      Description:
        Fn::Sub: ${AWS::StackName} 443/tcp on Datagrok ALB for Datagrok Server
      FromPort: 443
      GroupId:
        Ref: DatagrokALBSecurityGroup
      IpProtocol: TCP
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress
  Datagrok443IngressNatGW:
    Condition: AccessFromNatGW
    Properties:
      CidrIp:
        Fn::Sub:
        - ${ip}/32
        - ip:
            Ref: DatagrokNatGatewayEIP
      Description:
        Fn::Sub: ${AWS::StackName} NatGW 443/tcp on Datagrok ALB for Datagrok Server
      FromPort: 443
      GroupId:
        Ref: DatagrokALBSecurityGroup
      IpProtocol: TCP
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress
  Datagrok443IngressVPC:
    Properties:
      CidrIp:
        Ref: CIDR
      Description:
        Fn::Sub: ${AWS::StackName} VPC 443/tcp on Datagrok ALB for Datagrok Server
      FromPort: 443
      GroupId:
        Ref: DatagrokALBSecurityGroup
      IpProtocol: TCP
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress
  Datagrok80Ingress:
    Properties:
      CidrIp:
        Ref: InternetSubnetAllow
      Description:
        Fn::Sub: ${AWS::StackName} 80/tcp on Datagrok ALB for Datagrok Server
      FromPort: 80
      GroupId:
        Ref: DatagrokALBSecurityGroup
      IpProtocol: TCP
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  Datagrok80Ingress2:
    Condition: AccessFromInternetSubnetAllow2
    Properties:
      CidrIp:
        Ref: InternetSubnetAllow2
      Description:
        Fn::Sub: ${AWS::StackName} 80/tcp on Datagrok ALB for Datagrok Server
      FromPort: 80
      GroupId:
        Ref: DatagrokALBSecurityGroup
      IpProtocol: TCP
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  Datagrok80Ingress3:
    Condition: AccessFromInternetSubnetAllow3
    Properties:
      CidrIp:
        Ref: InternetSubnetAllow3
      Description:
        Fn::Sub: ${AWS::StackName} 80/tcp on Datagrok ALB for Datagrok Server
      FromPort: 80
      GroupId:
        Ref: DatagrokALBSecurityGroup
      IpProtocol: TCP
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  Datagrok80IngressNatGW:
    Condition: AccessFromNatGW
    Properties:
      CidrIp:
        Fn::Sub:
        - ${ip}/32
        - ip:
            Ref: DatagrokNatGatewayEIP
      Description:
        Fn::Sub: ${AWS::StackName} NatGW 80/tcp on Datagrok ALB for Datagrok Server
      FromPort: 80
      GroupId:
        Ref: DatagrokALBSecurityGroup
      IpProtocol: TCP
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  Datagrok80IngressVPC:
    Properties:
      CidrIp:
        Ref: CIDR
      Description:
        Fn::Sub: ${AWS::StackName} VPC 80/tcp on Datagrok ALB for Datagrok Server
      FromPort: 80
      GroupId:
        Ref: DatagrokALBSecurityGroup
      IpProtocol: TCP
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  DatagrokALBIntSecurityGroup:
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName} Datagrok ALB Internal Security Group
      SecurityGroupEgress:
      - Description:
          Fn::Sub: ${AWS::StackName} Datagrok egress rules
        DestinationSecurityGroupId:
          Ref: DatagrokSecurityGroup
        FromPort: 0
        IpProtocol: TCP
        ToPort: 65535
      SecurityGroupIngress:
      - Description:
          Fn::Sub: ${AWS::StackName} Allow internal connections from CVM to Datagrok
        FromPort: 8080
        IpProtocol: TCP
        SourceSecurityGroupId:
          Ref: CvmSecurityGroup
        ToPort: 8080
      - Description:
          Fn::Sub: ${AWS::StackName} Allow internal connections from CVM to Grok Pipe
        FromPort: 3000
        IpProtocol: TCP
        SourceSecurityGroupId:
          Ref: CvmSecurityGroup
        ToPort: 3000
      - Description:
          Fn::Sub: ${AWS::StackName} Allow internal connections from Datagrok to Datagrok
        FromPort: 8080
        IpProtocol: TCP
        SourceSecurityGroupId:
          Ref: DatagrokSecurityGroup
        ToPort: 8080
      - Description:
          Fn::Sub: ${AWS::StackName} Allow internal connections from Datagrok to Grok
            Connect
        FromPort: 1234
        IpProtocol: TCP
        SourceSecurityGroupId:
          Ref: DatagrokSecurityGroup
        ToPort: 1234
      - Description:
          Fn::Sub: ${AWS::StackName} Allow internal connections from Datagrok to Grok
            Spawner
        FromPort: 8000
        IpProtocol: TCP
        SourceSecurityGroupId:
          Ref: DatagrokSecurityGroup
        ToPort: 8000
      - Description:
          Fn::Sub: ${AWS::StackName} Allow internal connections from Datagrok to Grok
            Pipe
        FromPort: 3000
        IpProtocol: TCP
        SourceSecurityGroupId:
          Ref: DatagrokSecurityGroup
        ToPort: 3000
      - Description:
          Fn::Sub: ${AWS::StackName} Allow internal connections from Datagrok to Rabbitmq
        FromPort: 5672
        IpProtocol: TCP
        SourceSecurityGroupId:
          Ref: DatagrokSecurityGroup
        ToPort: 5672
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-alb-int
      - Key: datagrok.component
        Value: datagrok
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::SecurityGroup
  DatagrokALBSecurityGroup:
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName} Datagrok ALB Security Group
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-alb
      - Key: datagrok.component
        Value: datagrok
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::SecurityGroup
  DatagrokAdminDevKey:
    Properties:
      Description: Datagrok Admin user developer key
      GenerateSecretString:
        ExcludePunctuation: true
        GenerateStringKey: password
        PasswordLength: 24
        RequireEachIncludedType: true
        SecretStringTemplate: '{"user": "admin"}'
    Type: AWS::SecretsManager::Secret
  DatagrokAdminPassword:
    Properties:
      Description: Datagrok Admin user first-login password
      GenerateSecretString:
        ExcludePunctuation: true
        GenerateStringKey: password
        PasswordLength: 16
        RequireEachIncludedType: true
        SecretStringTemplate: '{"user": "admin"}'
    Type: AWS::SecretsManager::Secret
  DatagrokCloudMap:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Service Map for Datagrok
      Name:
        Fn::Sub: ${AWS::StackName}.datagrok.${AWS::Region}.cm.internal
      Vpc:
        Ref: DatagrokVPC
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  DatagrokCluster:
    Properties:
      ClusterName:
        Fn::Sub: ${AWS::StackName}
      ClusterSettings:
      - Name: containerInsights
        Value: enabled
      Tags:
      - Key: datagrok.component
        Value: datagrok
    Type: AWS::ECS::Cluster
  DatagrokDB:
    DeletionPolicy: Snapshot
    Properties:
      AllocatedStorage: '50'
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 3
      DBInstanceClass: db.t3.large
      DBInstanceIdentifier:
        Fn::Sub: ${AWS::StackName}-rds
      DBName: datagrok
      DBSubnetGroupName:
        Ref: DatagrokDBSubnetGroup
      DeleteAutomatedBackups: true
      DeletionProtection: false
      EnableIAMDatabaseAuthentication: true
      Engine: postgres
      EngineVersion: '17'
      MasterUserPassword:
        Fn::Sub:
        - '{{resolve:secretsmanager:${secret}:SecretString:password}}'
        - secret:
            Ref: DatagrokDbAdminUser
      MasterUsername:
        Fn::Sub:
        - '{{resolve:secretsmanager:${secret}:SecretString:user}}'
        - secret:
            Ref: DatagrokDbAdminUser
      MultiAZ: false
      Port: '5432'
      PubliclyAccessible: false
      StorageEncrypted: true
      Tags:
      - Key: datagrok.component
        Value: datagrok
      VPCSecurityGroups:
      - Ref: DatagrokDBSecurityGroup
    Type: AWS::RDS::DBInstance
    UpdateReplacePolicy: Delete
  DatagrokDBSecurityGroup:
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName} Datagrok DB Security Group
      SecurityGroupEgress: []
      SecurityGroupIngress:
      - Description:
          Fn::Sub: ${AWS::StackName} Allow connection from datagrok server
        FromPort: 5432
        IpProtocol: TCP
        SourceSecurityGroupId:
          Ref: DatagrokSecurityGroup
        ToPort: 5432
      - Description:
          Fn::Sub: ${AWS::StackName} Allow connection from JKG server
        FromPort: 5432
        IpProtocol: TCP
        SourceSecurityGroupId:
          Ref: CvmSecurityGroup
        ToPort: 5432
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-rds
      - Key: datagrok.component
        Value: datagrok
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::SecurityGroup
  DatagrokDBSubnetGroup:
    Properties:
      DBSubnetGroupDescription:
        Fn::Sub: ${AWS::StackName} Datagrok DatagrokDB Subnet Group
      DBSubnetGroupName:
        Fn::Sub: ${AWS::StackName}-rds-subnet
      SubnetIds:
      - Ref: DatagrokDataSubnet1
      - Ref: DatagrokDataSubnet2
      Tags:
      - Key: datagrok.component
        Value: rds
    Type: AWS::RDS::DBSubnetGroup
  DatagrokDataSubnet1:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::Select:
        - 4
        - Fn::Cidr:
          - Fn::GetAtt:
            - DatagrokVPC
            - CidrBlock
          - 6
          - 6
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} Datagrok Data Subnet 1
      - Key: datagrok.component
        Value: rds
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::Subnet
  DatagrokDataSubnet2:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::Select:
        - 5
        - Fn::Cidr:
          - Fn::GetAtt:
            - DatagrokVPC
            - CidrBlock
          - 6
          - 6
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} Datagrok Data Subnet 2
      - Key: datagrok.component
        Value: rds
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::Subnet
  DatagrokDataSubnetRouteAssos1:
    Properties:
      RouteTableId:
        Ref: DatagrokDataSubnetRouteTable
      SubnetId:
        Ref: DatagrokDataSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
  DatagrokDataSubnetRouteAssos2:
    Properties:
      RouteTableId:
        Ref: DatagrokDataSubnetRouteTable
      SubnetId:
        Ref: DatagrokDataSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
  DatagrokDataSubnetRouteTable:
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} Datagrok Data Subnet Route Table
      - Key: datagrok.component
        Value: rds
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::RouteTable
  DatagrokDbAdminUser:
    Properties:
      Description: Datagrok Admin User First-login password
      GenerateSecretString:
        ExcludePunctuation: true
        GenerateStringKey: password
        PasswordLength: 32
        RequireEachIncludedType: true
        SecretStringTemplate: '{"user": "superuser"}'
    Type: AWS::SecretsManager::Secret
  DatagrokDbUser:
    Properties:
      Description: Datagrok Admin User First-login password
      GenerateSecretString:
        ExcludePunctuation: true
        GenerateStringKey: password
        PasswordLength: 32
        RequireEachIncludedType: true
        SecretStringTemplate: '{"user": "dg"}'
    Type: AWS::SecretsManager::Secret
  DatagrokECSPolicy:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Datagrok policy for ECS Services
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}ECSPolicy-${AWS::Region}
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource:
          - Fn::GetAtt:
            - DatagrokLogGroup
            - Arn
          - Fn::Sub:
            - ${log}:log-stream:*
            - log:
                Fn::GetAtt:
                - DatagrokLogGroup
                - Arn
        - Action:
          - ecr:GetAuthorizationToken
          Effect: Allow
          Resource: '*'
        - Action:
          - ecr:BatchCheckLayerAvailability
          - ecr:BatchGetImage
          - ecr:GetDownloadUrlForLayer
          Effect: Allow
          Resource:
          - arn:aws:ecr:us-east-1:709825985650:repository/datagrok/*
          - Fn::Sub: arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/datagrok/*
        Version: '2012-10-17'
    Type: AWS::IAM::ManagedPolicy
  DatagrokEgress:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Datagrok egress rules
      DestinationSecurityGroupId:
        Ref: DatagrokSecurityGroup
      FromPort: 0
      GroupId:
        Ref: DatagrokALBSecurityGroup
      IpProtocol: TCP
      ToPort: 65535
    Type: AWS::EC2::SecurityGroupEgress
  DatagrokInsightsLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub:
        - /aws/ecs/containerinsights/${cluster_name}/performance
        - cluster_name:
            Ref: DatagrokCluster
      RetentionInDays: 7
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
  DatagrokInternetGateway:
    Condition: CreatePublicSubnets
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} Datagrok Internet Gateway
      - Key: datagrok.component
        Value: common
    Type: AWS::EC2::InternetGateway
  DatagrokInternetGatewayAttach:
    Condition: CreatePublicSubnets
    Properties:
      InternetGatewayId:
        Ref: DatagrokInternetGateway
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::VPCGatewayAttachment
  DatagrokJupyterKernelGatewayService:
    Properties:
      Cluster:
        Fn::GetAtt:
        - CvmCluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - Ref: CvmSecurityGroup
          Subnets:
          - Ref: DatagrokPrivateSubnet1
          - Ref: DatagrokPrivateSubnet2
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      Tags:
      - Key: datagrok.component
        Value: cvm
      - Key: datagrok.service
        Value: jupyter_kernel_gateway
      TaskDefinition:
        Ref: DatagrokJupyterKernelGatewayTaskDefinition
    Type: AWS::ECS::Service
  DatagrokJupyterKernelGatewayTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - Fn::Sub: ${AWS::Region}.compute.internal
        - Fn::Sub: ${AWS::StackName}.datagrok.${AWS::Region}.lb.internal
        - Fn::Sub: ${AWS::StackName}.datagrok.${AWS::Region}.cm.internal
        Essential: false
        Image:
          Fn::Sub:
          - ${domain}/${repo}:${tag}
          - domain:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - domain
            repo:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - repo
            tag:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - version
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: DatagrokLogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: jkg
        MemoryReservation: 100
        Name: ResolvConf
        ReadonlyRootFilesystem: true
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: ResolvConf
        Environment:
        - Name: GROK_PARAMETERS
          Value:
            Fn::Sub:
            - '{ "queueSettings":{ "amqpHost":"${amqpHost}", "amqpPort": 5672, "amqpUser":"guest",
              "amqpPassword":"${amqpPassword}", "pipeHost":"${pipeHost}", "pipeKey":"${grokPipeApiKey}"
              }}'
            - amqpHost:
                Fn::Sub: rabbit.${AWS::StackName}.datagrok.${AWS::Region}.lb.internal
              amqpPassword:
                Fn::Sub:
                - '{{resolve:secretsmanager:${secret}:SecretString:password}}'
                - secret:
                    Ref: RabbitMQPassword
              grokPipeApiKey:
                Fn::Sub:
                - '{{resolve:secretsmanager:${secret}:SecretString:apikey}}'
                - secret:
                    Ref: GrokPipeApiKeySecret
              pipeHost:
                Fn::Sub: pipe.${AWS::StackName}.datagrok.${AWS::Region}.lb.internal
        Essential: true
        Image:
          Fn::Sub:
          - ${domain}/${repo}:${tag}
          - domain:
              Fn::FindInMap:
              - Images
              - JKG
              - domain
            repo:
              Fn::FindInMap:
              - Images
              - JKG
              - repo
            tag:
              Ref: JKGVersion
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: DatagrokLogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: jkg
        MemoryReservation: 2048
        Name: jupyter_kernel_gateway
        PortMappings:
        - ContainerPort: 5005
          HostPort: 5005
          Protocol: tcp
        - ContainerPort: 8888
          HostPort: 8888
          Protocol: tcp
      Cpu: '1024'
      EphemeralStorage:
        SizeInGiB: 50
      ExecutionRoleArn:
        Fn::GetAtt:
        - DatagrokTaskExecutionRole
        - Arn
      Family:
        Fn::Sub: ${AWS::StackName}-cvm-jupyter_kernel_gateway
      Memory: '3072'
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  DatagrokKanikoPolicy:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Kaniko policy to access AWS resources
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-Kaniko-${AWS::Region}
      PolicyDocument:
        Statement:
        - Action:
          - ecr:GetAuthorizationToken
          Effect: Allow
          Resource: '*'
        - Action:
          - ecr:CompleteLayerUpload
          - ecr:UploadLayerPart
          - ecr:InitiateLayerUpload
          - ecr:BatchCheckLayerAvailability
          - ecr:PutImage
          - ecr:TagResource
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/datagrok/*
        - Action:
          - ecr:BatchCheckLayerAvailability
          - ecr:BatchGetImage
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/datagrok/*
        - Action:
          - s3:GetObject
          - s3:ListBucket
          Effect: Allow
          Resource:
          - Fn::GetAtt:
            - DatagrokS3
            - Arn
          - Fn::Sub:
            - ${bucket}/dockerfiles/*
            - bucket:
                Fn::GetAtt:
                - DatagrokS3
                - Arn
        Version: '2012-10-17'
    Type: AWS::IAM::ManagedPolicy
  DatagrokKanikoTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Essential: true
        Image:
          Fn::Sub:
          - ${domain}/${repo}:${tag}
          - domain:
              Fn::FindInMap:
              - Images
              - Kaniko
              - domain
            repo:
              Fn::FindInMap:
              - Images
              - Kaniko
              - repo
            tag:
              Fn::FindInMap:
              - Images
              - Kaniko
              - version
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: DatagrokLogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: grok_spawner_kaniko
        MemoryReservation: 100
        Name: grok_spawner_kaniko
      Cpu: '1024'
      ExecutionRoleArn:
        Fn::GetAtt:
        - DatagrokTaskExecutionRole
        - Arn
      Family:
        Fn::Sub: ${AWS::StackName}-grok_spawner_kaniko
      Memory: '4096'
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      TaskRoleArn:
        Ref: DatagrokKanikoTaskRole
    Type: AWS::ECS::TaskDefinition
  DatagrokKanikoTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Ref: DatagrokKanikoPolicy
      Tags:
      - Key: datagrok.component
        Value: datagrok
      - Key: datagrok.service
        Value: grok_spawner
    Type: AWS::IAM::Role
  DatagrokLoadBalancer:
    Properties:
      LoadBalancerAttributes:
      - Key: routing.http.drop_invalid_header_fields.enabled
        Value: 'true'
      Name:
        Fn::Sub: ${AWS::StackName}
      Scheme:
        Fn::If:
        - InternetIngressAccess
        - internet-facing
        - internal
      SecurityGroups:
      - Ref: DatagrokALBSecurityGroup
      Subnets:
        Fn::If:
        - InternetIngressAccess
        - - Ref: DatagrokPublicSubnet1
          - Ref: DatagrokPublicSubnet2
        - - Ref: DatagrokPrivateSubnet1
          - Ref: DatagrokPrivateSubnet2
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-alb
      - Key: datagrok.component
        Value: datagrok
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  DatagrokLoadBalancerInt:
    Properties:
      LoadBalancerAttributes:
      - Key: routing.http.drop_invalid_header_fields.enabled
        Value: 'true'
      Name:
        Fn::Sub: ${AWS::StackName}-int
      Scheme: internal
      SecurityGroups:
      - Ref: DatagrokALBIntSecurityGroup
      Subnets:
      - Ref: DatagrokPrivateSubnet1
      - Ref: DatagrokPrivateSubnet2
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-alb-int
      - Key: datagrok.component
        Value: datagrok
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  DatagrokLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: /ecs/${AWS::StackName}-${AWS::Region}
      RetentionInDays: 7
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
  DatagrokNatGateway:
    Condition: InternetEgressAccess
    Properties:
      AllocationId:
        Fn::GetAtt:
        - DatagrokNatGatewayEIP
        - AllocationId
      ConnectivityType: public
      SubnetId:
        Ref: DatagrokPublicSubnet1
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} Datagrok Nat Gateway
      - Key: datagrok.component
        Value: common
    Type: AWS::EC2::NatGateway
  DatagrokNatGatewayEIP:
    Condition: InternetEgressAccess
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} Datagrok Nat Gateway EIP
      - Key: datagrok.component
        Value: common
    Type: AWS::EC2::EIP
  DatagrokPolicy:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Datagrok policy to access AWS resources
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}S3Access-${AWS::Region}
      PolicyDocument:
        Statement:
        - Action:
          - s3:PutObject
          - s3:GetObject
          - s3:DeleteObject
          - s3:ListBucket
          Condition: {}
          Effect: Allow
          Resource:
          - Fn::GetAtt:
            - DatagrokS3
            - Arn
          - Fn::Sub:
            - ${bucket}/*
            - bucket:
                Fn::GetAtt:
                - DatagrokS3
                - Arn
        Version: '2012-10-17'
    Type: AWS::IAM::ManagedPolicy
  DatagrokPrivateDNS:
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - DatagrokLoadBalancerInt
          - DNSName
        HostedZoneId:
          Fn::GetAtt:
          - DatagrokLoadBalancerInt
          - CanonicalHostedZoneID
      Comment:
        Fn::Sub: ${AWS::StackName} Private Datagrok DNS for internal routing
      HostedZoneId:
        Ref: DatagrokPrivateDNSZone
      Name:
        Fn::Sub: datagrok.${AWS::StackName}.datagrok.${AWS::Region}.lb.internal.
      Type: A
    Type: AWS::Route53::RecordSet
  DatagrokPrivateDNSZone:
    Properties:
      HostedZoneConfig:
        Comment:
          Fn::Sub: ${AWS::StackName} Private Datagrok Zone for internal routing
      Name:
        Fn::Sub: ${AWS::StackName}.datagrok.${AWS::Region}.lb.internal.
      VPCs:
      - VPCId:
          Ref: DatagrokVPC
        VPCRegion:
          Ref: AWS::Region
    Type: AWS::Route53::HostedZone
  DatagrokPrivateSubnet1:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::Select:
        - 2
        - Fn::Cidr:
          - Fn::GetAtt:
            - DatagrokVPC
            - CidrBlock
          - 6
          - 6
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} Datagrok Private Subnet 1
      - Key: datagrok.component
        Value: common
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::Subnet
  DatagrokPrivateSubnet2:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::Select:
        - 3
        - Fn::Cidr:
          - Fn::GetAtt:
            - DatagrokVPC
            - CidrBlock
          - 6
          - 6
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} Datagrok Private Subnet 2
      - Key: datagrok.component
        Value: common
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::Subnet
  DatagrokPrivateSubnetNatRoute:
    Condition: InternetEgressAccess
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: DatagrokNatGateway
      RouteTableId:
        Ref: DatagrokPrivateSubnetRouteTable
    Type: AWS::EC2::Route
  DatagrokPrivateSubnetRouteAssos1:
    Properties:
      RouteTableId:
        Ref: DatagrokPrivateSubnetRouteTable
      SubnetId:
        Ref: DatagrokPrivateSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
  DatagrokPrivateSubnetRouteAssos2:
    Properties:
      RouteTableId:
        Ref: DatagrokPrivateSubnetRouteTable
      SubnetId:
        Ref: DatagrokPrivateSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
  DatagrokPrivateSubnetRouteTable:
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} Datagrok Private Subnet Route Table
      - Key: datagrok.component
        Value: common
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::RouteTable
  DatagrokPublicSubnet1:
    Condition: CreatePublicSubnets
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::Select:
        - 0
        - Fn::Cidr:
          - Fn::GetAtt:
            - DatagrokVPC
            - CidrBlock
          - 6
          - 6
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} Datagrok Public Subnet 1
      - Key: datagrok.component
        Value: common
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::Subnet
  DatagrokPublicSubnet2:
    Condition: CreatePublicSubnets
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::Select:
        - 1
        - Fn::Cidr:
          - Fn::GetAtt:
            - DatagrokVPC
            - CidrBlock
          - 6
          - 6
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} Datagrok Public Subnet 2
      - Key: datagrok.component
        Value: common
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::Subnet
  DatagrokPublicSubnetPublicRoute:
    Condition: CreatePublicSubnets
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: DatagrokInternetGateway
      RouteTableId:
        Ref: DatagrokPublicSubnetRouteTable
    Type: AWS::EC2::Route
  DatagrokPublicSubnetRouteAssos1:
    Condition: CreatePublicSubnets
    Properties:
      RouteTableId:
        Ref: DatagrokPublicSubnetRouteTable
      SubnetId:
        Ref: DatagrokPublicSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
  DatagrokPublicSubnetRouteAssos2:
    Condition: CreatePublicSubnets
    Properties:
      RouteTableId:
        Ref: DatagrokPublicSubnetRouteTable
      SubnetId:
        Ref: DatagrokPublicSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
  DatagrokPublicSubnetRouteTable:
    Condition: CreatePublicSubnets
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} Datagrok Public Subnet Route Table
      - Key: datagrok.component
        Value: common
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::RouteTable
  DatagrokS3:
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: true
          ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName:
        Fn::Sub:
        - ${AWS::StackName}-s3-${uuid}
        - uuid:
            Fn::Select:
            - 2
            - Fn::Split:
              - /
              - Ref: AWS::StackId
      ObjectLockEnabled: false
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
      - Key: datagrok.component
        Value: datagrok
    Type: AWS::S3::Bucket
  DatagrokS3Empty:
    DependsOn:
    - DatagrokS3EmptyLambdaFunctionDatagrokLogGroup
    Properties:
      BucketName:
        Ref: DatagrokS3
      ServiceToken:
        Fn::GetAtt:
        - DatagrokS3EmptyLambdaFunction
        - Arn
    Type: AWS::CloudFormation::CustomResource
  DatagrokS3EmptyLambdaFunction:
    Properties:
      Code:
        ZipFile: "import boto3\nimport cfnresponse\n\n\ndef handler(event, context):\n\
          \    try:\n        bucket = event['ResourceProperties']['BucketName']\n\
          \        status = 0\n\n        if event['RequestType'] == 'Delete':\n  \
          \          s3 = boto3.resource('s3')\n            bucket = s3.Bucket(bucket)\n\
          \            for obj in bucket.objects.filter():\n                s3.Object(bucket.name,\
          \ obj.key).delete()\n            status = 201\n\n        cfnresponse.send(event,\
          \ context, cfnresponse.SUCCESS, {'Status': status})\n    except Exception\
          \ as e:\n        print(type(e).__name__, e)\n        cfnresponse.send(event,\
          \ context, cfnresponse.FAILED, {'Exception': f\"{type(e).__name__} {e}\"\
          })\n"
      Description: Empty S3 bucket on CFN deletion for Datagrok
      Handler: index.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - DatagrokS3EmptyLambdaRole
        - Arn
      Runtime: python3.10
      Timeout: 600
    Type: AWS::Lambda::Function
  DatagrokS3EmptyLambdaFunctionDatagrokLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub:
        - /aws/lambda/${function_name}
        - function_name:
            Ref: DatagrokS3EmptyLambdaFunction
      RetentionInDays: 1
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
  DatagrokS3EmptyLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}S3EmptyLambdaFunction-*:*
          - Action:
            - s3:GetObject
            - s3:DeleteObject
            - s3:ListBucket
            Effect: Allow
            Resource:
            - Fn::GetAtt:
              - DatagrokS3
              - Arn
            - Fn::Sub:
              - ${bucket}/*
              - bucket:
                  Fn::GetAtt:
                  - DatagrokS3
                  - Arn
          Version: '2012-10-17'
        PolicyName:
          Fn::Sub: ${AWS::StackName}-s3-lambda
    Type: AWS::IAM::Role
  DatagrokS3Policy:
    Properties:
      Bucket:
        Ref: DatagrokS3
      PolicyDocument:
        Statement:
        - Fn::If:
          - UseVPCEndpoint
          - Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            Condition:
              StringNotEquals:
                aws:PrincipalArn:
                - Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
                - Ref: DatagrokS3EmptyLambdaRole
                aws:SourceVpce:
                  Ref: DatagrokS3VPCEndpoint
            Effect: Deny
            Principal: '*'
            Resource:
            - Fn::GetAtt:
              - DatagrokS3
              - Arn
            - Fn::Sub:
              - ${bucket}/*
              - bucket:
                  Fn::GetAtt:
                  - DatagrokS3
                  - Arn
          - Ref: AWS::NoValue
        - Action: '*'
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Deny
          Principal: '*'
          Resource:
          - Fn::GetAtt:
            - DatagrokS3
            - Arn
          - Fn::Sub:
            - ${bucket}/*
            - bucket:
                Fn::GetAtt:
                - DatagrokS3
                - Arn
        Version: '2012-10-17'
    Type: AWS::S3::BucketPolicy
  DatagrokS3VPCEndpoint:
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - s3:PutObject
          - s3:GetObject
          - s3:DeleteObject
          - s3:ListBucket
          Condition: {}
          Effect: Allow
          Principal: '*'
          Resource:
          - Fn::GetAtt:
            - DatagrokS3
            - Arn
          - Fn::Sub:
            - ${bucket}/*
            - bucket:
                Fn::GetAtt:
                - DatagrokS3
                - Arn
          - Fn::Sub: arn:aws:s3:::amazonlinux.${AWS::Region}.amazonaws.com
          - Fn::Sub: arn:aws:s3:::amazonlinux.${AWS::Region}.amazonaws.com/*
          - Fn::Sub: arn:aws:s3:::amazonlinux-2-repos-${AWS::Region}
          - Fn::Sub: arn:aws:s3:::amazonlinux-2-repos-${AWS::Region}/*
          - Fn::Sub: arn:aws:s3:::prod-${AWS::Region}-starport-layer-bucket
          - Fn::Sub: arn:aws:s3:::prod-${AWS::Region}-starport-layer-bucket/*
          - arn:aws:s3:::docker-images-prod
          - arn:aws:s3:::docker-images-prod/*
          - arn:aws:s3:::datagrok-data
          - arn:aws:s3:::datagrok-data/*
          - Fn::Sub:
            - arn:aws:s3:::cloudformation-custom-resource-response-${region}
            - region:
                Fn::Join:
                - ''
                - Fn::Split:
                  - '-'
                  - Ref: AWS::Region
          - Fn::Sub:
            - arn:aws:s3:::cloudformation-custom-resource-response-${region}/*
            - region:
                Fn::Join:
                - ''
                - Fn::Split:
                  - '-'
                  - Ref: AWS::Region
        Version: '2012-10-17'
      RouteTableIds:
      - Ref: DatagrokPrivateSubnetRouteTable
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::VPCEndpoint
  DatagrokSecurityGroup:
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName} Datagrok Security Group
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}
      - Key: datagrok.component
        Value: datagrok
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::SecurityGroup
  DatagrokSecurityGroupALBCommunications:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Allow communication from ALB to Datagrok components
      GroupId:
        Ref: DatagrokSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId:
        Ref: DatagrokALBSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
  DatagrokSecurityGroupCvmCommunications:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Allow communication from CVM to Datagrok components
      GroupId:
        Ref: DatagrokSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId:
        Ref: CvmSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
  DatagrokSecurityGroupIntALBCommunications:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Allow communication from internal ALB to Datagrok
          components
      GroupId:
        Ref: DatagrokSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId:
        Ref: DatagrokALBIntSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
  DatagrokSecurityGroupInternalCommunications:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Allow communication within network Datagrok
      GroupId:
        Ref: DatagrokSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId:
        Ref: DatagrokSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
  DatagrokService:
    DependsOn:
    - DatagrokTCP80Listener
    - DatagrokTCP443Listener
    - DatagrokTCP8080IntListener
    - DatagrokS3
    - DatagrokDB
    Properties:
      Cluster:
        Fn::GetAtt:
        - DatagrokCluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: datagrok
        ContainerPort: 8080
        TargetGroupArn:
          Ref: DatagrokTCP8080TargetGroup
      - ContainerName: datagrok
        ContainerPort: 8080
        TargetGroupArn:
          Ref: DatagrokTCP8080IntTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - Ref: DatagrokSecurityGroup
          Subnets:
          - Ref: DatagrokPrivateSubnet1
          - Ref: DatagrokPrivateSubnet2
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - DatagrokServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: datagrok.component
        Value: datagrok
      - Key: datagrok.service
        Value: datagrok
      TaskDefinition:
        Ref: DatagrokTaskDefinition
    Type: AWS::ECS::Service
  DatagrokServiceDiscoveryEntry:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Datagrok datagrok service discovery entry in Cloud
          Map
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: datagrok
      NamespaceId:
        Ref: DatagrokCloudMap
    Type: AWS::ServiceDiscovery::Service
  DatagrokSpawnerTagsPolicy:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Policy for tagging resources
      PolicyDocument:
        Statement:
        - Action:
          - ecs:TagResource
          Condition:
            StringEquals:
              ecs:CreateAction:
              - CreateService
              - RegisterTaskDefinition
              - UpdateService
          Effect: Allow
          Resource:
          - Fn::Sub:
            - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${cluster_name}/*
            - cluster_name:
                Ref: DatagrokCluster
          - Fn::Sub:
            - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${cluster_name}/*
            - cluster_name:
                Ref: CvmCluster
          - Fn::Sub: arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/*
        Version: '2012-10-17'
    Type: AWS::IAM::ManagedPolicy
  DatagrokTCP443Listener:
    Properties:
      Certificates:
      - CertificateArn:
          Ref: DatagrokArnSSLCertificate
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: DatagrokTCP8080TargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: DatagrokLoadBalancer
      Port: 443
      Protocol: HTTPS
    Type: AWS::ElasticLoadBalancingV2::Listener
  DatagrokTCP8000IntListener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: DatagrokTCP8000IntTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: DatagrokLoadBalancerInt
      Port: 8000
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  DatagrokTCP8000IntTargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /info
      Matcher:
        HttpCode: 200
      Name:
        Fn::Sub: ${AWS::StackName}-gs-i
      Port: 8000
      Protocol: HTTP
      Tags:
      - Key: datagrok.component
        Value: datagrok
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  DatagrokTCP8080IntListener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: DatagrokTCP8080IntTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: DatagrokLoadBalancerInt
      Port: 8080
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  DatagrokTCP8080IntTargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /api/admin/health
      Matcher:
        HttpCode: 200
      Name:
        Fn::Sub: ${AWS::StackName}-i
      Port: 8080
      Protocol: HTTP
      Tags:
      - Key: datagrok.component
        Value: datagrok
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  DatagrokTCP8080TargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /api/admin/health
      Matcher:
        HttpCode: 200
      Name:
        Fn::Sub: ${AWS::StackName}
      Port: 8080
      Protocol: HTTP
      Tags:
      - Key: datagrok.component
        Value: datagrok
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  DatagrokTCP80Listener:
    Properties:
      DefaultActions:
      - RedirectConfig:
          Port: '443'
          Protocol: HTTPS
          StatusCode: HTTP_301
        Type: redirect
      LoadBalancerArn:
        Ref: DatagrokLoadBalancer
      Port: 80
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  DatagrokTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - Fn::Sub: ${AWS::Region}.compute.internal
        - Fn::Sub: ${AWS::StackName}.datagrok.${AWS::Region}.lb.internal
        - Fn::Sub: ${AWS::StackName}.datagrok.${AWS::Region}.cm.internal
        Essential: false
        Image:
          Fn::Sub:
          - ${domain}/${repo}:${tag}
          - domain:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - domain
            repo:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - repo
            tag:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - version
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: DatagrokLogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: datagrok
        MemoryReservation: 100
        Name: ResolvConf
        ReadonlyRootFilesystem: true
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: ResolvConf
        Environment:
        - Name: GROK_MODE
          Value: auto
        - Name: GROK_PARAMETERS
          Value:
            Fn::Sub:
            - '{ "amazonStorageRegion": "${AWS::Region}", "amazonStorageBucket": "${bucket}",
              "dbServer": "${dbServer}", "dbPort": "${dbPort}", "db": "datagrok",
              "dbLogin": "${dbLogin}", "dbPassword": "${dbPassword}", "dbAdminLogin":
              "${dbAdminLogin}", "dbAdminPassword": "${dbAdminPassword}", "dbSsl":
              true, "deployDemo": false, "deployTestDemo": false, "adminPassword":
              "${adminPassword}", "adminDevKey": "${adminDevKey}", "queueSettings":{
              "amqpHost":"${amqpHost}", "amqpPort": 5672, "amqpUser":"guest", "amqpPassword":"${amqpPassword}",
              "pipeHost":"${pipeHost}", "pipeKey":"${grokPipeApiKey}" }, "dockerSettings":{
              "grokSpawnerApiKey":"test-x-api-key", "grokSpawnerHost":"${grokSpawnerHost}",
              "grokSpawnerPort":8000, "imageBuildTimeoutMinutes":30, "proxyRequestTimeout":60000
              }, "connectorsSettings":{ "dataframeParsingMode":"New Process", "externalDataFrameCompress":true,
              "grokConnectHost":"${grokConnectHost}", "grokConnectPort":1234, "localFileSystemAccess":false,
              "sambaSpaceEscape":"none", "sambaVersion":"3.0", "windowsSharesProxy":""
              } }'
            - adminDevKey:
                Fn::Sub:
                - '{{resolve:secretsmanager:${secret}:SecretString:password}}'
                - secret:
                    Ref: DatagrokAdminDevKey
              adminPassword:
                Fn::Sub:
                - '{{resolve:secretsmanager:${secret}:SecretString:password}}'
                - secret:
                    Ref: DatagrokAdminPassword
              amqpHost:
                Fn::Sub: rabbit.${AWS::StackName}.datagrok.${AWS::Region}.lb.internal
              amqpPassword:
                Fn::Sub:
                - '{{resolve:secretsmanager:${secret}:SecretString:password}}'
                - secret:
                    Ref: RabbitMQPassword
              bucket:
                Ref: DatagrokS3
              dbAdminLogin:
                Fn::Sub:
                - '{{resolve:secretsmanager:${secret}:SecretString:user}}'
                - secret:
                    Ref: DatagrokDbAdminUser
              dbAdminPassword:
                Fn::Sub:
                - '{{resolve:secretsmanager:${secret}:SecretString:password}}'
                - secret:
                    Ref: DatagrokDbAdminUser
              dbLogin:
                Fn::Sub:
                - '{{resolve:secretsmanager:${secret}:SecretString:user}}'
                - secret:
                    Ref: DatagrokDbUser
              dbPassword:
                Fn::Sub:
                - '{{resolve:secretsmanager:${secret}:SecretString:password}}'
                - secret:
                    Ref: DatagrokDbUser
              dbPort:
                Fn::GetAtt:
                - DatagrokDB
                - Endpoint.Port
              dbServer:
                Fn::GetAtt:
                - DatagrokDB
                - Endpoint.Address
              grokConnectHost:
                Fn::Sub: grok_connect.${AWS::StackName}.datagrok.${AWS::Region}.lb.internal
              grokPipeApiKey:
                Fn::Sub:
                - '{{resolve:secretsmanager:${secret}:SecretString:apikey}}'
                - secret:
                    Ref: GrokPipeApiKeySecret
              grokSpawnerHost:
                Fn::Sub: grok_spawner.${AWS::StackName}.datagrok.${AWS::Region}.lb.internal
              pipeHost:
                Fn::Sub: pipe.${AWS::StackName}.datagrok.${AWS::Region}.lb.internal
        Essential: true
        Image:
          Fn::Sub:
          - ${domain}/${repo}:${tag}
          - domain:
              Fn::FindInMap:
              - Images
              - Datagrok
              - domain
            repo:
              Fn::FindInMap:
              - Images
              - Datagrok
              - repo
            tag:
              Ref: DatagrokVersion
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: DatagrokLogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: datagrok
        MemoryReservation: 1024
        Name: datagrok
        PortMappings:
        - ContainerPort: 8080
          HostPort: 8080
          Protocol: tcp
      Cpu: '2048'
      ExecutionRoleArn:
        Fn::GetAtt:
        - DatagrokTaskExecutionRole
        - Arn
      Family:
        Fn::Sub: ${AWS::StackName}
      Memory: '4096'
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      TaskRoleArn:
        Ref: DatagrokTaskRole
    Type: AWS::ECS::TaskDefinition
  DatagrokTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Ref: DatagrokECSPolicy
    Type: AWS::IAM::Role
  DatagrokTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Ref: DatagrokPolicy
      - Ref: DatagrokECSPolicy
      Tags:
      - Key: datagrok.component
        Value: datagrok
      - Key: datagrok.service
        Value: datagrok
    Type: AWS::IAM::Role
  DatagrokVPC:
    Properties:
      CidrBlock:
        Ref: CIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} Datagrok VPC
      - Key: datagrok.component
        Value: common
    Type: AWS::EC2::VPC
  GrokConnectPrivateDNS:
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - DatagrokLoadBalancerInt
          - DNSName
        HostedZoneId:
          Fn::GetAtt:
          - DatagrokLoadBalancerInt
          - CanonicalHostedZoneID
      Comment:
        Fn::Sub: ${AWS::StackName} Private Datagrok grok connect DNS for internal
          routing
      HostedZoneId:
        Ref: DatagrokPrivateDNSZone
      Name:
        Fn::Sub: grok_connect.${AWS::StackName}.datagrok.${AWS::Region}.lb.internal.
      Type: A
    Type: AWS::Route53::RecordSet
  GrokConnectService:
    DependsOn:
    - GrokConnectTCP1234IntListener
    Properties:
      Cluster:
        Fn::GetAtt:
        - DatagrokCluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: grok_connect
        ContainerPort: 1234
        TargetGroupArn:
          Ref: GrokConnectTCP1234IntTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - Ref: DatagrokSecurityGroup
          Subnets:
          - Ref: DatagrokPrivateSubnet1
          - Ref: DatagrokPrivateSubnet2
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - GrokConnectServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: datagrok.component
        Value: datagrok
      - Key: datagrok.service
        Value: grok_connect
      TaskDefinition:
        Ref: GrokConnectTaskDefinition
    Type: AWS::ECS::Service
  GrokConnectServiceDiscoveryEntry:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Datagrok grok_connect service discovery entry in
          Cloud Map
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: grok_connect
      NamespaceId:
        Ref: DatagrokCloudMap
    Type: AWS::ServiceDiscovery::Service
  GrokConnectTCP1234IntListener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: GrokConnectTCP1234IntTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: DatagrokLoadBalancerInt
      Port: 1234
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  GrokConnectTCP1234IntTargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /health
      Matcher:
        HttpCode: 200
      Name:
        Fn::Sub: ${AWS::StackName}-gcon-i
      Port: 1234
      Protocol: HTTP
      Tags:
      - Key: datagrok.component
        Value: datagrok
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  GrokConnectTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - Fn::Sub: ${AWS::Region}.compute.internal
        - Fn::Sub: ${AWS::StackName}.datagrok.${AWS::Region}.lb.internal
        - Fn::Sub: ${AWS::StackName}.datagrok.${AWS::Region}.cm.internal
        Essential: false
        Image:
          Fn::Sub:
          - ${domain}/${repo}:${tag}
          - domain:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - domain
            repo:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - repo
            tag:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - version
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: DatagrokLogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: grok_connect
        MemoryReservation: 100
        Name: ResolvConf
        ReadonlyRootFilesystem: true
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: ResolvConf
        Environment:
        - Name: GROK_CONNECT_PORT
          Value: 1234
        - Name: CONNECTION_POOL_MAXIMUM_SIZE
          Value: 50
        - Name: CONNECTION_POOL_IDLE_TIMEOUT
          Value: 300000
        Essential: true
        Image:
          Fn::Sub:
          - ${domain}/${repo}:${tag}
          - domain:
              Fn::FindInMap:
              - Images
              - GrokConnect
              - domain
            repo:
              Fn::FindInMap:
              - Images
              - GrokConnect
              - repo
            tag:
              Ref: GrokConnectVersion
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: DatagrokLogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: grok_connect
        MemoryReservation: 1024
        Name: grok_connect
        PortMappings:
        - ContainerPort: 1234
          HostPort: 1234
          Protocol: tcp
        ReadonlyRootFilesystem: true
      Cpu: '1024'
      ExecutionRoleArn:
        Fn::GetAtt:
        - DatagrokTaskExecutionRole
        - Arn
      Family:
        Fn::Sub: ${AWS::StackName}-grok_connect
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  GrokPipeApiKeySecret:
    Properties:
      Description: Automatically generated API key for Datagrok
      GenerateSecretString:
        ExcludeCharacters: '"@/\!#$%^&*()-_=+[]{}|;:,.<>?`~'
        GenerateStringKey: apikey
        PasswordLength: 32
        SecretStringTemplate: '{"apikey": ""}'
      Name:
        Fn::Sub: ${AWS::StackName}-GrokPipeApiKey
    Type: AWS::SecretsManager::Secret
  GrokPipePrivateDNS:
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - DatagrokLoadBalancerInt
          - DNSName
        HostedZoneId:
          Fn::GetAtt:
          - DatagrokLoadBalancerInt
          - CanonicalHostedZoneID
      Comment:
        Fn::Sub: ${AWS::StackName} Private Datagrok grok pipe DNS for internal routing
      HostedZoneId:
        Ref: DatagrokPrivateDNSZone
      Name:
        Fn::Sub: pipe.${AWS::StackName}.datagrok.${AWS::Region}.lb.internal.
      Type: A
    Type: AWS::Route53::RecordSet
  GrokPipeService:
    DependsOn:
    - GrokPipeTCP3000IntListener
    Properties:
      Cluster:
        Fn::GetAtt:
        - DatagrokCluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: grok_pipe
        ContainerPort: 3000
        TargetGroupArn:
          Ref: GrokPipeTCP3000IntTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - Ref: DatagrokSecurityGroup
          Subnets:
          - Ref: DatagrokPrivateSubnet1
          - Ref: DatagrokPrivateSubnet2
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - GrokPipeServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: datagrok.component
        Value: datagrok
      - Key: datagrok.service
        Value: grok_pipe
      TaskDefinition:
        Ref: GrokPipeTaskDefinition
    Type: AWS::ECS::Service
  GrokPipeServiceDiscoveryEntry:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Datagrok grok_pipe service discovery entry in Cloud
          Map
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: grok_pipe
      NamespaceId:
        Ref: DatagrokCloudMap
    Type: AWS::ServiceDiscovery::Service
  GrokPipeTCP3000IntListener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: GrokPipeTCP3000IntTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: DatagrokLoadBalancerInt
      Port: 3000
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  GrokPipeTCP3000IntTargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /info
      Matcher:
        HttpCode: 200
      Name:
        Fn::Sub: ${AWS::StackName}-gpipe-i
      Port: 3000
      Protocol: HTTP
      Tags:
      - Key: datagrok.component
        Value: datagrok
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  GrokPipeTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - Fn::Sub: ${AWS::Region}.compute.internal
        - Fn::Sub: ${AWS::StackName}.datagrok.${AWS::Region}.lb.internal
        - Fn::Sub: ${AWS::StackName}.datagrok.${AWS::Region}.cm.internal
        Essential: false
        Image:
          Fn::Sub:
          - ${domain}/${repo}:${tag}
          - domain:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - domain
            repo:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - repo
            tag:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - version
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: DatagrokLogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: grok_pipe
        MemoryReservation: 100
        Name: ResolvConf
        ReadonlyRootFilesystem: true
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: ResolvConf
        Environment:
        - Name: API_KEY
          Value:
            Fn::Sub:
            - ${apiKey}
            - apiKey:
                Fn::Sub:
                - '{{resolve:secretsmanager:${secret}:SecretString:apikey}}'
                - secret:
                    Ref: GrokPipeApiKeySecret
        Essential: true
        Image:
          Fn::Sub:
          - ${domain}/${repo}:${tag}
          - domain:
              Fn::FindInMap:
              - Images
              - GrokPipe
              - domain
            repo:
              Fn::FindInMap:
              - Images
              - GrokPipe
              - repo
            tag:
              Ref: GrokPipeVersion
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: DatagrokLogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: grok_pipe
        MemoryReservation: 1024
        Name: grok_pipe
        PortMappings:
        - ContainerPort: 3000
          HostPort: 3000
          Protocol: tcp
        ReadonlyRootFilesystem: true
      Cpu: '1024'
      ExecutionRoleArn:
        Fn::GetAtt:
        - DatagrokTaskExecutionRole
        - Arn
      Family:
        Fn::Sub: ${AWS::StackName}-grok_pipe
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  GrokSpawnerECRPolicy:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Grok Spawner ECR policy to access AWS resources
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-GrokSpawner-ECR-${AWS::Region}
      PolicyDocument:
        Statement:
        - Action:
          - ecr:GetAuthorizationToken
          Effect: Allow
          Resource: '*'
        - Action:
          - ecr:CreateRepository
          Condition:
            StringEquals:
              aws:RequestTag/builder:
              - grok_spawner
          Effect: Allow
          Resource: '*'
        - Action:
          - ecr:TagResource
          Condition:
            StringEquals:
              aws:RequestTag/builder:
              - grok_spawner
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/datagrok/*
        - Action:
          - ecr:DescribeRepositories
          - ecr:ListImages
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/datagrok/*
        Version: '2012-10-17'
    Type: AWS::IAM::ManagedPolicy
  GrokSpawnerKanikoPolicy:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Grok Spawner ECR policy to access AWS resources
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-GrokSpawner-Kaniko-${AWS::Region}
      PolicyDocument:
        Statement:
        - Action:
          - ecs:RunTask
          Condition:
            ArnEquals:
              ecs:cluster:
              - Fn::GetAtt:
                - DatagrokCluster
                - Arn
              - Fn::GetAtt:
                - CvmCluster
                - Arn
          Effect: Allow
          Resource:
            Ref: DatagrokKanikoTaskDefinition
        - Action:
          - iam:PassRole
          Effect: Allow
          Resource:
          - Fn::GetAtt:
            - DatagrokKanikoTaskRole
            - Arn
          - Fn::GetAtt:
            - DatagrokTaskExecutionRole
            - Arn
        - Action:
          - s3:GetObject
          - s3:PutObject
          - s3:ListBucket
          Effect: Allow
          Resource:
          - Fn::GetAtt:
            - DatagrokS3
            - Arn
          - Fn::Sub:
            - ${bucket}/dockerfiles/*
            - bucket:
                Fn::GetAtt:
                - DatagrokS3
                - Arn
        Version: '2012-10-17'
    Type: AWS::IAM::ManagedPolicy
  GrokSpawnerPolicy:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Grok Spawner policy to access AWS resources
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-GrokSpawner-${AWS::Region}
      PolicyDocument:
        Statement:
        - Action:
          - ecs:ListTasks
          Condition:
            ArnEquals:
              ecs:cluster:
              - Fn::GetAtt:
                - DatagrokCluster
                - Arn
              - Fn::GetAtt:
                - CvmCluster
                - Arn
          Effect: Allow
          Resource: '*'
        - Action:
          - ecs:DescribeTaskDefinition
          - ecs:ListTaskDefinitions
          - ecs:DeregisterTaskDefinition
          - ecs:RegisterTaskDefinition
          Condition: {}
          Effect: Allow
          Resource: '*'
        - Action:
          - ecs:DescribeServices
          - ecs:UpdateService
          - ecs:DeleteService
          - ecs:ListServices
          Condition:
            ArnEquals:
              ecs:cluster:
              - Fn::GetAtt:
                - DatagrokCluster
                - Arn
              - Fn::GetAtt:
                - CvmCluster
                - Arn
          Effect: Allow
          Resource:
          - Fn::Sub:
            - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${cluster_name}/*
            - cluster_name:
                Ref: DatagrokCluster
          - Fn::Sub:
            - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${cluster_name}/*
            - cluster_name:
                Ref: CvmCluster
        - Action:
          - ecs:ListContainerInstances
          Effect: Allow
          Resource:
          - Fn::Sub:
            - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${cluster_name}
            - cluster_name:
                Ref: DatagrokCluster
          - Fn::Sub:
            - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${cluster_name}
            - cluster_name:
                Ref: CvmCluster
        - Action:
          - ecs:DescribeContainerInstances
          Effect: Allow
          Resource:
          - Fn::Sub:
            - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:container-instance/${cluster_name}/*
            - cluster_name:
                Ref: DatagrokCluster
          - Fn::Sub:
            - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:container-instance/${cluster_name}/*
            - cluster_name:
                Ref: CvmCluster
        - Action:
          - ecs:CreateService
          - ecs:TagResource
          Condition:
            ArnEquals:
              ecs:cluster:
              - Fn::GetAtt:
                - DatagrokCluster
                - Arn
              - Fn::GetAtt:
                - CvmCluster
                - Arn
            StringEquals:
              aws:RequestTag/caller:
              - grok_spawner
          Effect: Allow
          Resource:
          - Fn::Sub:
            - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${cluster_name}/*
            - cluster_name:
                Ref: DatagrokCluster
          - Fn::Sub:
            - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${cluster_name}/*
            - cluster_name:
                Ref: CvmCluster
        - Action:
          - ecs:DescribeTasks
          Condition:
            ArnEquals:
              ecs:cluster:
              - Fn::GetAtt:
                - DatagrokCluster
                - Arn
              - Fn::GetAtt:
                - CvmCluster
                - Arn
          Effect: Allow
          Resource:
          - Fn::Sub:
            - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/${cluster_name}/*
            - cluster_name:
                Ref: DatagrokCluster
          - Fn::Sub:
            - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/${cluster_name}/*
            - cluster_name:
                Ref: CvmCluster
        - Action:
          - logs:GetLogEvents
          Effect: Allow
          Resource:
            Fn::Sub:
            - ${log_group}:log-stream:grok_spawner/*
            - log_group:
                Fn::GetAtt:
                - DatagrokLogGroup
                - Arn
        - Action:
          - ecs:DescribeClusters
          Effect: Allow
          Resource:
          - Fn::Sub:
            - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${cluster_name}/*
            - cluster_name:
                Ref: DatagrokCluster
          - Fn::Sub:
            - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${cluster_name}/*
            - cluster_name:
                Ref: CvmCluster
        - Action:
          - iam:PassRole
          Effect: Allow
          Resource:
          - Fn::GetAtt:
            - DatagrokKanikoTaskRole
            - Arn
          - Fn::GetAtt:
            - DatagrokTaskExecutionRole
            - Arn
        Version: '2012-10-17'
    Type: AWS::IAM::ManagedPolicy
  GrokSpawnerPrivateDNS:
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - DatagrokLoadBalancerInt
          - DNSName
        HostedZoneId:
          Fn::GetAtt:
          - DatagrokLoadBalancerInt
          - CanonicalHostedZoneID
      Comment:
        Fn::Sub: ${AWS::StackName} Private Datagrok grok spawner DNS for internal
          routing
      HostedZoneId:
        Ref: DatagrokPrivateDNSZone
      Name:
        Fn::Sub: grok_spawner.${AWS::StackName}.datagrok.${AWS::Region}.lb.internal.
      Type: A
    Type: AWS::Route53::RecordSet
  GrokSpawnerService:
    DependsOn:
    - DatagrokTCP8000IntListener
    Properties:
      Cluster:
        Fn::GetAtt:
        - DatagrokCluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: grok_spawner
        ContainerPort: 8000
        TargetGroupArn:
          Ref: DatagrokTCP8000IntTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - Ref: DatagrokSecurityGroup
          Subnets:
          - Ref: DatagrokPrivateSubnet1
          - Ref: DatagrokPrivateSubnet2
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - GrokSpawnerServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: datagrok.component
        Value: datagrok
      - Key: datagrok.service
        Value: grok_spawner
      TaskDefinition:
        Ref: GrokSpawnerTaskDefinition
    Type: AWS::ECS::Service
  GrokSpawnerServiceDiscoveryEntry:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Datagrok grok_spawner service discovery entry in
          Cloud Map
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: grok_spawner
      NamespaceId:
        Ref: DatagrokCloudMap
    Type: AWS::ServiceDiscovery::Service
  GrokSpawnerTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - Fn::Sub: ${AWS::Region}.compute.internal
        - Fn::Sub: ${AWS::StackName}.datagrok.${AWS::Region}.lb.internal
        - Fn::Sub: ${AWS::StackName}.datagrok.${AWS::Region}.cm.internal
        Essential: false
        Image:
          Fn::Sub:
          - ${domain}/${repo}:${tag}
          - domain:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - domain
            repo:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - repo
            tag:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - version
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: DatagrokLogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: grok_spawner
        MemoryReservation: 100
        Name: ResolvConf
        ReadonlyRootFilesystem: true
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: ResolvConf
        Environment:
        - Name: GROK_SPAWNER_ENVIRONMENT
          Value:
            Fn::Sub: ${AWS::StackName}
        - Name: GROK_SPAWNER_DATAGROK_ECS__CLUSTER
          Value:
            Ref: DatagrokCluster
        - Name: GROK_SPAWNER_DATAGROK_ECS__CLUSTER_REGION
          Value:
            Fn::Sub: ${AWS::Region}
        - Name: GROK_SPAWNER_DATAGROK_ECS__LAUNCH_TYPE
          Value:
            Fn::Sub: EC2
        - Name: GROK_SPAWNER_DATAGROK_ECS__SUBNETS
          Value:
            Fn::Sub:
            - '["${s1}", "${s2}"]'
            - s1:
                Ref: DatagrokPrivateSubnet1
              s2:
                Ref: DatagrokPrivateSubnet2
        - Name: GROK_SPAWNER_DATAGROK_ECS__SECURITY_GROUPS
          Value:
            Fn::Sub:
            - '["${s1}"]'
            - s1:
                Ref: DatagrokSecurityGroup
        - Name: GROK_SPAWNER_DATAGROK_ECS__KANIKO_S3_BUCKET
          Value:
            Ref: DatagrokS3
        - Name: GROK_SPAWNER_DATAGROK_ECS__KANIKO_TASK_DEFINITION
          Value:
            Ref: DatagrokKanikoTaskDefinition
        - Name: GROK_SPAWNER_DATAGROK_ECS__LOG_GROUP
          Value:
            Fn::Sub:
            - arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${logs}
            - logs:
                Ref: DatagrokLogGroup
        - Name: GROK_SPAWNER_CVM_ECS__CLUSTER
          Value:
            Ref: CvmCluster
        - Name: GROK_SPAWNER_CVM_ECS__CLUSTER_REGION
          Value:
            Fn::Sub: ${AWS::Region}
        - Name: GROK_SPAWNER_CVM_ECS__LAUNCH_TYPE
          Value:
            Fn::Sub: EC2
        - Name: GROK_SPAWNER_CVM_ECS__SUBNETS
          Value:
            Fn::Sub:
            - '["${s1}", "${s2}"]'
            - s1:
                Ref: DatagrokPrivateSubnet1
              s2:
                Ref: DatagrokPrivateSubnet2
        - Name: GROK_SPAWNER_CVM_ECS__SECURITY_GROUPS
          Value:
            Fn::Sub:
            - '["${s1}"]'
            - s1:
                Ref: CvmSecurityGroup
        - Name: GROK_SPAWNER_CVM_ECS__KANIKO_S3_BUCKET
          Value:
            Ref: DatagrokS3
        - Name: GROK_SPAWNER_CVM_ECS__KANIKO_TASK_DEFINITION
          Value:
            Ref: DatagrokKanikoTaskDefinition
        - Name: GROK_SPAWNER_CVM_ECS__LOG_GROUP
          Value:
            Fn::Sub:
            - arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${logs}
            - logs:
                Ref: DatagrokLogGroup
        - Name: GROK_SPAWNER_DATAGROK_ECS__EXEC_ROLE
          Value:
            Ref: DatagrokTaskExecutionRole
        - Name: GROK_SPAWNER_CVM_ECS__EXEC_ROLE
          Value:
            Ref: DatagrokTaskExecutionRole
        Essential: true
        Image:
          Fn::Sub:
          - ${domain}/${repo}:${tag}
          - domain:
              Fn::FindInMap:
              - Images
              - GrokSpawner
              - domain
            repo:
              Fn::FindInMap:
              - Images
              - GrokSpawner
              - repo
            tag:
              Ref: GrokSpawnerVersion
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: DatagrokLogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: grok_spawner
        MemoryReservation: 100
        Name: grok_spawner
        PortMappings:
        - ContainerPort: 8000
          HostPort: 8000
          Protocol: tcp
      Cpu: '1024'
      ExecutionRoleArn:
        Fn::GetAtt:
        - DatagrokTaskExecutionRole
        - Arn
      Family:
        Fn::Sub: ${AWS::StackName}-grok_spawner
      Memory: '4096'
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      TaskRoleArn:
        Ref: GrokSpawnerTaskRole
    Type: AWS::ECS::TaskDefinition
  GrokSpawnerTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Ref: GrokSpawnerPolicy
      - Ref: GrokSpawnerECRPolicy
      - Ref: GrokSpawnerKanikoPolicy
      - Ref: DatagrokECSPolicy
      - Ref: DatagrokSpawnerTagsPolicy
      Tags:
      - Key: datagrok.component
        Value: datagrok
      - Key: datagrok.service
        Value: grok_spawner
    Type: AWS::IAM::Role
  RabbitMQPassword:
    Properties:
      Description: Automatically generated RabbitMQ password
      GenerateSecretString:
        ExcludeCharacters: '"@/\!#$%^&*()-_=+[]{}|;:,.<>?`~'
        GenerateStringKey: password
        PasswordLength: 16
        SecretStringTemplate: '{"password": "password"}'
    Type: AWS::SecretsManager::Secret
  RabbitMQSecurityGroup:
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName} Datagrok Security Group
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        Description: Allow all outbound traffic
        IpProtocol: '-1'
      SecurityGroupIngress:
      - CidrIp:
          Ref: CIDR
        Description: Allow AMQP traffic from VPC
        FromPort: 5672
        IpProtocol: tcp
        ToPort: 5672
      - CidrIp:
          Ref: CIDR
        Description: Allow RabbitMQ Management UI (HTTP 15672) from VPC
        FromPort: 15672
        IpProtocol: tcp
        ToPort: 15672
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}
      - Key: datagrok.component
        Value: datagrok
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::SecurityGroup
  RabbitmqNLB:
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-RabbitMQ-NLB
      Scheme: internal
      SecurityGroups:
      - Ref: RabbitmqSecurityGroup
      Subnets:
      - Ref: DatagrokPrivateSubnet1
      - Ref: DatagrokPrivateSubnet2
      Type: network
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  RabbitmqPrivateDNS:
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - RabbitmqNLB
          - DNSName
        HostedZoneId:
          Fn::GetAtt:
          - RabbitmqNLB
          - CanonicalHostedZoneID
      Comment:
        Fn::Sub: ${AWS::StackName} Private Datagrok grok pipe DNS for internal routing
      HostedZoneId:
        Ref: DatagrokPrivateDNSZone
      Name:
        Fn::Sub: rabbit.${AWS::StackName}.datagrok.${AWS::Region}.lb.internal.
      Type: A
    Type: AWS::Route53::RecordSet
  RabbitmqSecurityGroup:
    Properties:
      GroupDescription: Security Group for RabbitMQ
      SecurityGroupIngress:
      - Description:
          Fn::Sub: ${AWS::StackName} Allow internal connections from Datagrok to Rabbitmq
        FromPort: 5672
        IpProtocol: TCP
        SourceSecurityGroupId:
          Ref: DatagrokSecurityGroup
        ToPort: 5672
      - Description:
          Fn::Sub: ${AWS::StackName} Allow internal connections from CVM to Rabbitmq
        FromPort: 5672
        IpProtocol: TCP
        SourceSecurityGroupId:
          Ref: CvmSecurityGroup
        ToPort: 5672
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::EC2::SecurityGroup
  RabbitmqService:
    DependsOn:
    - RabbitmqTCP5672Listener
    Properties:
      Cluster:
        Fn::GetAtt:
        - DatagrokCluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: rabbitmq
        ContainerPort: 5672
        TargetGroupArn:
          Ref: RabbitmqTCP5672TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - Ref: RabbitMQSecurityGroup
          Subnets:
          - Ref: DatagrokPrivateSubnet1
          - Ref: DatagrokPrivateSubnet2
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - RabbitmqServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: datagrok.component
        Value: datagrok
      - Key: datagrok.service
        Value: rabbitmq
      TaskDefinition:
        Ref: RabbitmqTaskDefinition
    Type: AWS::ECS::Service
  RabbitmqServiceDiscoveryEntry:
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} Datagrok rabbitmq service discovery entry in Cloud
          Map
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: rabbitmq
      NamespaceId:
        Ref: DatagrokCloudMap
    Type: AWS::ServiceDiscovery::Service
  RabbitmqTCP5672Listener:
    Properties:
      DefaultActions:
      - TargetGroupArn:
          Ref: RabbitmqTCP5672TargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: RabbitmqNLB
      Port: 5672
      Protocol: TCP
    Type: AWS::ElasticLoadBalancingV2::Listener
  RabbitmqTCP5672TargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPort: 5672
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 3
      Name:
        Fn::Sub: ${AWS::StackName}-RabbitMQ-5672
      Port: 5672
      Protocol: TCP
      TargetType: ip
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: DatagrokVPC
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  RabbitmqTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - Fn::Sub: ${AWS::Region}.compute.internal
        - Fn::Sub: ${AWS::StackName}.datagrok.${AWS::Region}.lb.internal
        - Fn::Sub: ${AWS::StackName}.datagrok.${AWS::Region}.cm.internal
        Essential: false
        Image:
          Fn::Sub:
          - ${domain}/${repo}:${tag}
          - domain:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - domain
            repo:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - repo
            tag:
              Fn::FindInMap:
              - Images
              - Searchdomain
              - version
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: DatagrokLogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: rabbitmq
        MemoryReservation: 100
        Name: ResolvConf
        ReadonlyRootFilesystem: true
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: ResolvConf
        Environment:
        - Name: RABBITMQ_DEFAULT_USER
          Value: guest
        - Name: RABBITMQ_DEFAULT_PASS
          Value:
            Fn::Sub:
            - ${amqpPassword}
            - amqpPassword:
                Fn::Sub:
                - '{{resolve:secretsmanager:${secret}:SecretString:password}}'
                - secret:
                    Ref: RabbitMQPassword
        Essential: true
        Image:
          Fn::Sub:
          - ${domain}/${repo}:${tag}
          - domain:
              Fn::FindInMap:
              - Images
              - Rabbitmq
              - domain
            repo:
              Fn::FindInMap:
              - Images
              - Rabbitmq
              - repo
            tag:
              Ref: RabbitmqVersion
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: DatagrokLogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: rabbitmq
        MemoryReservation: 1024
        Name: rabbitmq
        PortMappings:
        - ContainerPort: 5672
          HostPort: 5672
          Protocol: tcp
        - ContainerPort: 15672
          HostPort: 15672
          Protocol: tcp
        ReadonlyRootFilesystem: true
      Cpu: '1024'
      EphemeralStorage:
        SizeInGiB: 21
      ExecutionRoleArn:
        Fn::GetAtt:
        - DatagrokTaskExecutionRole
        - Arn
      Family:
        Fn::Sub: ${AWS::StackName}-rabbitmq
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
Rules:
  InternetSubnetAllow:
    Assertions:
    - Assert:
        Fn::Not:
        - Fn::Equals:
          - Ref: InternetSubnetAllow
          - Ref: InternetSubnetAllow2
      AssertDescription: Subnets for access to Datagrok client endpoints must be unique
        (InternetSubnetAllow and InternetSubnetAllow2 match)
    - Assert:
        Fn::Not:
        - Fn::Equals:
          - Ref: InternetSubnetAllow
          - Ref: InternetSubnetAllow3
      AssertDescription: Subnets for access to Datagrok client endpoints must be unique
        (InternetSubnetAllow and InternetSubnetAllow3 match)
    - Assert:
        Fn::Not:
        - Fn::Equals:
          - Ref: InternetSubnetAllow2
          - Ref: InternetSubnetAllow3
      AssertDescription: Subnets for access to Datagrok client endpoints must be unique
        (InternetSubnetAllow2 and InternetSubnetAllow3 match)
    RuleCondition:
      Fn::Or:
      - Fn::Not:
        - Fn::Equals:
          - Ref: InternetSubnetAllow2
          - ''
      - Fn::Not:
        - Fn::Equals:
          - Ref: InternetSubnetAllow3
          - ''
