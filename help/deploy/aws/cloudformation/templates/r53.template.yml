---
AWSTemplateFormatVersion: '2010-09-09'
Description: "Datagrok template to deploy all components to ECS Fargate. Template also creates ACM and DNS records."
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Client Endpoint configuration"
        Parameters:
          - DNSZoneId
          - DNSDomain
    ParameterLabels:
      DNSZoneId:
        default: "DNSZoneId: AWS Route53 Hosted Zone ID"
      DNSDomain:
        default: "DNSDomain: DNS domain"
Parameters:
  DNSZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: Select existing Route53 Hosted Zone ID for Datagrok endpoint.
  DNSDomain:
    Type: String
    MinLength: 3
    Description: Specify DNS domain for Datagrok endpoint. The domain should be based on hosted zone name for specified DNSZoneId. For example, if you specified DNSZoneId XXXXXX, which has name domain.com, then for DNSDomain you can use either 'subdomain.domain.com' or 'domain.com'. The result endpoint will be 'StackName.subdomain.domain.com'.
  Postfix:
    Type: String
    Description: URL postfix for backward compatibility. Leave blank for new installations
#Conditions:
#  CreateDNS:
#    Fn::And:
#      - Fn::Not:
#          - Fn::Equals:
#              - Ref: DNSDomain
#              - ''
#      - Fn::Not:
#          - Fn::Equals:
#              - Ref: DNSZoneId
#              - ''
#  CreateSSL:
#    Fn::And:
#      - Fn::Not:
#          - Fn::Equals:
#              - Ref: DNSDomain
#              - ''
#      - Fn::Not:
#          - Fn::Equals:
#              - Ref: DNSZoneId
#              - ''
Resources:
  DatagrokDNS:
    Type: AWS::Route53::RecordSet
    #    Condition: CreateDNS
    Properties:
      Type: A
      AliasTarget:
        HostedZoneId:
          Fn::GetAtt:
            - DatagrokLoadBalancer
            - CanonicalHostedZoneID
        DNSName:
          Fn::GetAtt:
            - DatagrokLoadBalancer
            - DNSName
      Comment:
        Fn::Sub: "${AWS::StackName} Public Datagrok DNS"
      HostedZoneId:
        Ref: DNSZoneId
      Name:
        Fn::Sub:
          - "${AWS::StackName}${postfix}.${domain}."
          - postfix:
              Ref: Postfix
            domain:
              Ref: DNSDomain
  DatagrokArnSSLCertificate:
    Type: AWS::CertificateManager::Certificate
    #    Condition: CreateSSL
    Properties:
      DomainName:
        Fn::Sub:
          - "${AWS::StackName}${postfix}.${domain}"
          - domain:
              Ref: DNSDomain
            postfix:
              Ref: Postfix
      DomainValidationOptions:
        - DomainName:
            Fn::Sub:
              - "${AWS::StackName}${postfix}.${domain}"
              - postfix:
                  Ref: Postfix
                domain:
                  Ref: DNSDomain
          HostedZoneId:
            Ref: DNSZoneId

      KeyAlgorithm: RSA_2048
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${AWS::StackName}${postfix}"
              - postfix:
                  Ref: Postfix
      ValidationMethod: DNS
  DatagrokR53CleanupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName:
            Fn::Sub: "${AWS::StackName}-r53-lambda"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  Fn::Sub: "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-R53CleanupLambdaFunction-*:*"
              - Effect: Allow
                Action:
                  - 'acm:DescribeCertificate'
                Resource:
                  Ref: DatagrokArnSSLCertificate
              - Effect: Allow
                Action:
                  - 'route53:ListResourceRecordSets'
                  - 'route53:ChangeResourceRecordSets'
                Resource:
                  Fn::Sub:
                    - "arn:${AWS::Partition}:route53:::hostedzone/${zone}"
                    - zone:
                        Ref: DNSZoneId
  DatagrokR53CleanupLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Removes obsolete validation records from AWS
      Code:
        ZipFile: |
          import boto3
          import cfnresponse


          def handler(event, context):
              responseData = {}
              try:
                  zone_id = event['ResourceProperties']['DNSZone']
                  certArn = event['ResourceProperties']['SSLCertificate']

                  if event['RequestType'] == 'Delete':
                      session = boto3.Session()
                      acm = session.client('acm')
                      response = acm.describe_certificate(CertificateArn=certArn)
                      records = []
                      for d in response['Certificate']['DomainValidationOptions']:
                          records.append(d['ResourceRecord'])
                      r53 = session.client('route53')
                      for r in records:
                          response = r53.list_resource_record_sets(HostedZoneId=zone_id, StartRecordName=r['Name'], MaxItems='1')
                          if r['Name'] in response['ResourceRecordSets'][0]['Name']:
                              r53.change_resource_record_sets(
                                  HostedZoneId=zone_id,
                                  ChangeBatch={
                                      'Changes': [{
                                          'Action': 'DELETE',
                                          'ResourceRecordSet': response['ResourceRecordSets'][0]
                                      }]
                                  }
                              )
                              print(f'Deleted: {response["ResourceRecordSets"][0]}')
                          else:
                              print(f'Record {r["Name"]} does not exist')
                      responseData['Status'] = 200
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              except Exception as e:
                  print(type(e).__name__, e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
      Handler: index.handler
      Runtime: python3.10
      Role:
        Fn::GetAtt:
          - DatagrokR53CleanupLambdaRole
          - Arn
      MemorySize: 128
      Timeout: 600
  DatagrokR53CleanupLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub:
          - "/aws/lambda/${function_name}"
          - function_name:
              Ref: DatagrokR53CleanupLambdaFunction
      RetentionInDays: 1
  DatagrokR53Cleanup:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - DatagrokR53CleanupLambdaFunctionLogGroup
    Properties:
      SSLCertificate:
        Ref: DatagrokArnSSLCertificate
      DNSZone:
        Ref: DNSZoneId
      ServiceToken:
        Fn::GetAtt:
          - DatagrokR53CleanupLambdaFunction
          - Arn
Outputs:
  DatagrokEndpoint:
    Description: Datagrok endpoint
    Value:
      Ref: DatagrokDNS
