/**
This file is auto-generated by the grok api command.
If you notice any changes, please push them to the repository.
Do not edit this file manually.
*/
import * as grok from 'datagrok-api/grok';
import * as DG from 'datagrok-api/dg';


export namespace queries {
  export async function getPlates(): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetPlates', {});
  }

  export async function getWellLevelProperties(): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetWellLevelProperties', {});
  }

  export async function getPlateLevelProperties(): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetPlateLevelProperties', {});
  }

  export async function getPropertyNames(): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetPropertyNames', {});
  }

  export async function getPlateTypes(): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetPlateTypes', {});
  }

  export async function getPlateTemplates(): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetPlateTemplates', {});
  }

  export async function getProperties(): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetProperties', {});
  }

  export async function getWellRoles(): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetWellRoles', {});
  }

  export async function getWellValuesByBarcode(barcode: string ): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetWellValuesByBarcode', { barcode });
  }

  export async function getWellValuesById(id: number ): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetWellValuesById', { id });
  }

  export async function getAllowedValues(propertyName: string ): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetAllowedValues', { propertyName });
  }

  export async function getUniquePlatePropertyValues(): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetUniquePlatePropertyValues', {});
  }

  export async function getUniqueWellPropertyValues(): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetUniqueWellPropertyValues', {});
  }

  export async function createProperty(propertyName: string , valueType: string , scope: string , choices: string | null, min: number | null, max: number | null): Promise<number> {
    return await grok.data.query('Plates:CreateProperty', { propertyName, valueType, scope, choices, min, max });
  }

  export async function createTemplate(name: string , description: string ): Promise<number> {
    return await grok.data.query('Plates:CreateTemplate', { name, description });
  }

  export async function getTemplateProperties(templateId: number ): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetTemplateProperties', { templateId });
  }

  export async function getPlateByBarcode(barcode: string ): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetPlateByBarcode', { barcode });
  }

  export async function createAnalysisRun(plateId: number , analysisType: string , groups: any ): Promise<number> {
    return await grok.data.query('Plates:CreateAnalysisRun', { plateId, analysisType, groups });
  }

  export async function saveAnalysisRunParameter(analysisRunId: number , propertyId: number , valueString: string | null, valueNum: number | null, valueBool: boolean | null, valueJsonb: string | null): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:SaveAnalysisRunParameter', { analysisRunId, propertyId, valueString, valueNum, valueBool, valueJsonb });
  }

  export async function saveAnalysisResult(analysisRunId: number , groupCombination: any , propertyId: number , valueString: string | null, valueNum: number | null, valueBool: boolean | null, valueJsonb: string | null): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:SaveAnalysisResult', { analysisRunId, groupCombination, propertyId, valueString, valueNum, valueBool, valueJsonb });
  }

  export async function getAnalysisRunGroups(analysisType: string ): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetAnalysisRunGroups', { analysisType });
  }

  export async function queryAnalyses(fullQuery: string ): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:QueryAnalyses', { fullQuery });
  }

  export async function queryAnalysesTemplate(): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:QueryAnalysesTemplate', {});
  }

  export async function addTemplatePlateProperty(templateId: number , propertyId: number , isRequired: boolean , defaultValue: string | null): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:AddTemplatePlateProperty', { templateId, propertyId, isRequired, defaultValue });
  }

  export async function addTemplateWellProperty(templateId: number , propertyId: number , isRequired: boolean , defaultValue: string | null): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:AddTemplateWellProperty', { templateId, propertyId, isRequired, defaultValue });
  }

  export async function getTemplatePlateProperties(templateId: number ): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetTemplatePlateProperties', { templateId });
  }

  export async function getTemplateWellProperties(templateId: number ): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:GetTemplateWellProperties', { templateId });
  }

  export async function removeTemplatePlateProperty(templateId: number , propertyId: number ): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:RemoveTemplatePlateProperty', { templateId, propertyId });
  }

  export async function removeTemplateWellProperty(templateId: number , propertyId: number ): Promise<DG.DataFrame> {
    return await grok.data.query('Plates:RemoveTemplateWellProperty', { templateId, propertyId });
  }

  export async function getPlatesCount(): Promise<number> {
    return await grok.data.query('Plates:GetPlatesCount', {});
  }
}

export namespace funcs {
  export async function autostart(): Promise<void> {
    return await grok.functions.call('Plates:Autostart', {});
  }

  /**
  Assasy plates with concentration, layout and readout data
  */
  export async function assayPlatesDemo(): Promise<void> {
    return await grok.functions.call('Plates:AssayPlatesDemo', {});
  }

  export async function initPlates(): Promise<void> {
    return await grok.functions.call('Plates:InitPlates', {});
  }

  export async function platesFolderPreview(folder: DG.FileInfo , files: any ): Promise<any> {
    return await grok.functions.call('Plates:PlatesFolderPreview', { folder, files });
  }

  export async function previewPlate(file: DG.FileInfo ): Promise<DG.View> {
    return await grok.functions.call('Plates:PreviewPlate', { file });
  }

  export async function importPlate(fileContent: string ): Promise<any> {
    return await grok.functions.call('Plates:ImportPlate', { fileContent });
  }

  /**
  Checks if an Excel file contains plate data.
  */
  export async function checkExcelIsPlate(content: any ): Promise<boolean> {
    return await grok.functions.call('Plates:CheckExcelIsPlate', { content });
  }

  export async function importPlateXlsx(fileContent: any ): Promise<void> {
    return await grok.functions.call('Plates:ImportPlateXlsx', { fileContent });
  }

  export async function previewPlateXlsx(file: DG.FileInfo ): Promise<DG.View> {
    return await grok.functions.call('Plates:PreviewPlateXlsx', { file });
  }

  /**
  Checks if a CSV file can be parsed as a plate.
  */
  export async function checkCsvIsPlate(file: DG.FileInfo ): Promise<boolean> {
    return await grok.functions.call('Plates:CheckCsvIsPlate', { file });
  }

  export async function checkFileIsPlate(content: string ): Promise<boolean> {
    return await grok.functions.call('Plates:CheckFileIsPlate', { content });
  }

  export async function platesApp(): Promise<DG.View> {
    return await grok.functions.call('Plates:PlatesApp', {});
  }

  export async function platesAppTreeBrowser(treeNode: any ): Promise<void> {
    return await grok.functions.call('Plates:PlatesAppTreeBrowser', { treeNode });
  }

  export async function getPlateByBarcode(barcode: string ): Promise<any> {
    return await grok.functions.call('Plates:GetPlateByBarcode', { barcode });
  }

  export async function createDummyPlateData(): Promise<void> {
    return await grok.functions.call('Plates:CreateDummyPlateData', {});
  }

  export async function init(): Promise<void> {
    return await grok.functions.call('Plates:Init', {});
  }

  export async function plateGridCellRenderer(): Promise<any> {
    return await grok.functions.call('Plates:PlateGridCellRenderer', {});
  }
}
