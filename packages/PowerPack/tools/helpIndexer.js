const fs = require('fs');
const path = require('path');
const yaml = require('yaml');

console.log('Starting help indexer...');

// Function to recursively find all .md files
function findMarkdownFiles(dir, fileList = []) {
  if (path.basename(dir??'')?.startsWith('_'))
    return fileList; // Skip directories starting with '_'
  const files = fs.readdirSync(dir);
  files.forEach((file) => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory())
      findMarkdownFiles(filePath, fileList);
    else if (path.extname(file) === '.md')
      fileList.push(filePath);
  });

  return fileList;
}

// Function to extract frontmatter from markdown content
function extractFrontmatter(content) {
  // Check if content starts with ---
  if (!content.startsWith('---'))
    return null;


  // Find the closing ---
  const endIndex = content.indexOf('\n---', 3);
  console.log(`End index: ${endIndex}`);
  if (endIndex === -1)
    return null;


  // Extract the YAML content between the --- markers
  const yamlContent = content.substring(3, endIndex).trim();

  try {
    const parsed = yaml.parse(yamlContent);

    // Check if title exists (required field)
    if (!parsed.title)
      return null;


    return parsed;
  } catch (error) {
    console.warn(`Warning: Failed to parse YAML frontmatter - ${error.message}`);
    return null;
  }
}

function processMarkdownFile(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    console.log(`Processing file: ${filePath}`);
    const frontmatter = extractFrontmatter(content?.trim() ?? '');

    if (frontmatter) {
      return {
        file: filePath,
        frontmatter: frontmatter,
      };
    }
  } catch (error) {
    console.warn(`Warning: Could not read file ${filePath} - ${error.message}`);
  }

  return null;
}

// Main function
function main() {
  const targetFolder = path.resolve(__dirname, '../../../help');
  console.log(`Scanning folder: ${path.resolve(targetFolder)}`);

  // Find all markdown files
  const markdownFiles = findMarkdownFiles(targetFolder);
  console.log(`Found ${markdownFiles.length} markdown file(s)`);
  // Process each file and extract frontmatter
  const results = [];
  markdownFiles.forEach((filePath) => {
    const result = processMarkdownFile(filePath);
    if (result && result.frontmatter) {
      results.push({
        helpURL: transformToLink(targetFolder, filePath),
        title: result.frontmatter.title,
        keywords: result.frontmatter.keywords});
    } else {
      console.warn(`No valid frontmatter found in file: ${filePath}`);
      results.push({
        helpURL: transformToLink(targetFolder, filePath),
        title: path.basename(filePath).endsWith('.md') ? path.basename(filePath, '.md') : path.basename(filePath),
      });
    }
  });
  const prefix = `
// This file is auto-generated by helpIndexer.js, do not edit manually
/* eslint-disable comma-dangle */
/* eslint-disable quotes */
`;
  const suffix = `;
`;
  const json = prefix + 'export const helpInfo = ' + JSON.stringify(results, null, 2) + suffix;
  const outputFile = path.resolve(__dirname, '../src/search/helpIndex.g.ts');
  fs.writeFileSync(outputFile, json, 'utf8');
  // Display results
}

function transformToLink(targetFolder, filePath) {
  const resolvedPath = path.resolve(filePath);
  const relativePath = path.relative(targetFolder, resolvedPath);
  return '/help/' + relativePath.replaceAll('\\\\', '/').replaceAll('\\', '/'); // Convert to POSIX path
}

// Run the tool
if (require.main === module)
  main();
