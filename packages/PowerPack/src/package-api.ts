/**
This file is auto-generated by the grok api command.
If you notice any changes, please push them to the repository.
Do not edit this file manually.
*/
import * as grok from 'datagrok-api/grok';
import * as DG from 'datagrok-api/dg';


export namespace queries {
  export async function mostRecentEntities(user: string ): Promise<DG.DataFrame> {
    return await grok.data.query('PowerPack:MostRecentEntities', { user });
  }
}

export namespace funcs {
  export async function addNewColumnDialog(call?: any ): Promise<void> {
    return await grok.functions.call('PowerPack:AddNewColumnDialog', { call });
  }

  export async function compareColumns(): Promise<void> {
    return await grok.functions.call('PowerPack:CompareColumns', {});
  }

  export async function welcomeView(): Promise<DG.View> {
    return await grok.functions.call('PowerPack:WelcomeView', {});
  }

  export async function activityDashboardWidget(): Promise<any> {
    return await grok.functions.call('PowerPack:ActivityDashboardWidget', {});
  }

  export async function recentProjectsWidget(): Promise<any> {
    return await grok.functions.call('PowerPack:RecentProjectsWidget', {});
  }

  export async function communityWidget(): Promise<any> {
    return await grok.functions.call('PowerPack:CommunityWidget', {});
  }

  export async function webWidget(): Promise<any> {
    return await grok.functions.call('PowerPack:WebWidget', {});
  }

  export async function htmlWidget(): Promise<any> {
    return await grok.functions.call('PowerPack:HtmlWidget', {});
  }

  export async function learnWidget(): Promise<any> {
    return await grok.functions.call('PowerPack:LearnWidget', {});
  }

  export async function kpiWidget(): Promise<any> {
    return await grok.functions.call('PowerPack:KpiWidget', {});
  }

  export async function isFormulaColumn(col: DG.Column ): Promise<boolean> {
    return await grok.functions.call('PowerPack:IsFormulaColumn', { col });
  }

  export async function formulaWidget(col: DG.Column ): Promise<any> {
    return await grok.functions.call('PowerPack:FormulaWidget', { col });
  }

  export async function powerPackSearchProvider(): Promise<any> {
    return await grok.functions.call('PowerPack:PowerPackSearchProvider', {});
  }

  export async function formulaLinesDialog(src?: any ): Promise<void> {
    return await grok.functions.call('PowerPack:FormulaLinesDialog', { src });
  }

  export async function powerPackInit(): Promise<void> {
    return await grok.functions.call('PowerPack:PowerPackInit', {});
  }

  /**
  Windows Manager
  */
  export async function windowsManager(): Promise<void> {
    return await grok.functions.call('PowerPack:WindowsManager', {});
  }

  /**
  Open 'Viewer Gallery' dialog
  */
  export async function viewerDialog(tv: any ): Promise<void> {
    return await grok.functions.call('PowerPack:ViewerDialog', { tv });
  }

  /**
  ViewerGallery
  */
  export async function viewerGallery(): Promise<void> {
    return await grok.functions.call('PowerPack:ViewerGallery', {});
  }

  export async function markdownFileViewer(file: DG.FileInfo ): Promise<DG.View> {
    return await grok.functions.call('PowerPack:MarkdownFileViewer', { file });
  }

  /**
  Opens Excel file
  */
  export async function xlsxFileHandler(bytes: any , sheetName?: string ): Promise<any> {
    return await grok.functions.call('PowerPack:XlsxFileHandler', { bytes, sheetName });
  }
}
