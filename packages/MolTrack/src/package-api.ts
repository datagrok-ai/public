/**
This file is auto-generated by the grok api command.
If you notice any changes, please push them to the repository.
Do not edit this file manually.
*/
import * as grok from 'datagrok-api/grok';
import * as DG from 'datagrok-api/dg';


export namespace queries {
  export async function getCompounds(): Promise<DG.DataFrame> {
    return await grok.data.query('MolTrack:GetCompounds', {});
  }

  export async function insertAdminUser(): Promise<DG.DataFrame> {
    return await grok.data.query('MolTrack:InsertAdminUser', {});
  }

  export async function insertSemanticTypeSynonym(): Promise<DG.DataFrame> {
    return await grok.data.query('MolTrack:InsertSemanticTypeSynonym', {});
  }

  export async function insertProperties(): Promise<DG.DataFrame> {
    return await grok.data.query('MolTrack:InsertProperties', {});
  }

  export async function insertSettings(): Promise<DG.DataFrame> {
    return await grok.data.query('MolTrack:InsertSettings', {});
  }
}

export namespace funcs {
  export async function molTrackApp(): Promise<DG.View> {
    return await grok.functions.call('MolTrack:MolTrackApp', {});
  }

  export async function cddVaultAppTreeBrowser(treeNode: any ): Promise<void> {
    return await grok.functions.call('MolTrack:CddVaultAppTreeBrowser', { treeNode });
  }

  /**
  Checks whether the Moltrack service is running and responsive
  */
  export async function checkMoltrackHealth(): Promise<string> {
    return await grok.functions.call('MolTrack:CheckMoltrackHealth', {});
  }

  /**
  Retrieves all properties defined for the 'compound' scope
  */
  export async function fetchMoltrackProperties(): Promise<string> {
    return await grok.functions.call('MolTrack:FetchMoltrackProperties', {});
  }

  /**
  Modifies compound properties in the Moltrack service based on the given JSON data
  */
  export async function updateMoltrackSchema(jsonPayload: string ): Promise<string> {
    return await grok.functions.call('MolTrack:UpdateMoltrackSchema', { jsonPayload });
  }
}
