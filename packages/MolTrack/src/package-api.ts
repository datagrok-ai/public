/**
This file is auto-generated by the grok api command.
If you notice any changes, please push them to the repository.
Do not edit this file manually.
*/
import * as grok from 'datagrok-api/grok';
import * as DG from 'datagrok-api/dg';


export namespace queries {
  export async function getCompounds(): Promise<DG.DataFrame> {
    return await grok.data.query('MolTrack:GetCompounds', {});
  }

  export async function insertAdminUser(): Promise<DG.DataFrame> {
    return await grok.data.query('MolTrack:InsertAdminUser', {});
  }

  export async function insertSemanticTypeSynonym(): Promise<DG.DataFrame> {
    return await grok.data.query('MolTrack:InsertSemanticTypeSynonym', {});
  }

  export async function insertProperties(): Promise<DG.DataFrame> {
    return await grok.data.query('MolTrack:InsertProperties', {});
  }

  export async function insertSettings(): Promise<DG.DataFrame> {
    return await grok.data.query('MolTrack:InsertSettings', {});
  }

  export async function insertStandartization(): Promise<DG.DataFrame> {
    return await grok.data.query('MolTrack:InsertStandartization', {});
  }
}

export namespace funcs {
  export async function init(): Promise<void> {
    return await grok.functions.call('MolTrack:Init', {});
  }

  export async function initDB(): Promise<void> {
    return await grok.functions.call('MolTrack:InitDB', {});
  }

  export async function molTrackApp(path?: string ): Promise<DG.View> {
    return await grok.functions.call('MolTrack:MolTrackApp', { path });
  }

  export async function molTrackAppTreeBrowser(treeNode: any , browseView: DG.View ): Promise<void> {
    return await grok.functions.call('MolTrack:MolTrackAppTreeBrowser', { treeNode, browseView });
  }

  /**
  Checks whether the MolTrack service is running and responsive
  */
  export async function checkMolTrackHealth(): Promise<string> {
    return await grok.functions.call('MolTrack:CheckMolTrackHealth', {});
  }

  /**
  Retrieves all properties defined for the 'compound' scope
  */
  export async function fetchCompoundProperties(): Promise<string> {
    return await grok.functions.call('MolTrack:FetchCompoundProperties', {});
  }

  /**
  Retrieves all properties defined for the 'batch' scope
  */
  export async function fetchBatchProperties(): Promise<string> {
    return await grok.functions.call('MolTrack:FetchBatchProperties', {});
  }

  /**
  Retrieves all dynamic fields
  */
  export async function fetchSchema(): Promise<string> {
    return await grok.functions.call('MolTrack:FetchSchema', {});
  }

  /**
  Retrieves all static fields
  */
  export async function fetchDirectSchema(): Promise<string> {
    return await grok.functions.call('MolTrack:FetchDirectSchema', {});
  }

  /**
  Registers compound properties in the MolTrack service based on the given JSON data
  */
  export async function updateMolTrackSchema(jsonPayload: string ): Promise<string> {
    return await grok.functions.call('MolTrack:UpdateMolTrackSchema', { jsonPayload });
  }

  export async function registerAssays(assayPayload: string ): Promise<string> {
    return await grok.functions.call('MolTrack:RegisterAssays', { assayPayload });
  }

  export async function registerBulk(csvFile: DG.FileInfo , scope: string , mapping: string , errorHandling: string ): Promise<DG.DataFrame> {
    return await grok.functions.call('MolTrack:RegisterBulk', { csvFile, scope, mapping, errorHandling });
  }

  export async function searchTest(operator: string ): Promise<void> {
    return await grok.functions.call('MolTrack:SearchTest', { operator });
  }

  export async function search(query: string , entityEndpoint: string ): Promise<DG.DataFrame> {
    return await grok.functions.call('MolTrack:Search', { query, entityEndpoint });
  }

  export async function retrieveEntity(scope: string ): Promise<DG.DataFrame> {
    return await grok.functions.call('MolTrack:RetrieveEntity', { scope });
  }

  export async function getMoltrackPropPanelByStructure(mol: string ): Promise<any> {
    return await grok.functions.call('MolTrack:GetMoltrackPropPanelByStructure', { mol });
  }

  export async function getMoltrackPropPanelById(id: string ): Promise<any> {
    return await grok.functions.call('MolTrack:GetMoltrackPropPanelById', { id });
  }
}
