/**
This file is auto-generated by the grok api command.
If you notice any changes, please push them to the repository.
Do not edit this file manually.
*/
import * as grok from 'datagrok-api/grok';
import * as DG from 'datagrok-api/dg';


export namespace funcs {
  export async function info(): Promise<any> {
    return await grok.functions.call('Docking:Info', {});
  }

  export async function getAutoDockService(): Promise<any> {
    return await grok.functions.call('Docking:GetAutoDockService', {});
  }

  export async function autoDockApp(): Promise<void> {
    return await grok.functions.call('Docking:AutoDockApp', {});
  }

  export async function getConfigFiles(): Promise<any> {
    return await grok.functions.call('Docking:GetConfigFiles', {});
  }

  export async function dockLigandCached(jsonForm: string , containerId: string ): Promise<string> {
    return await grok.functions.call('Docking:DockLigandCached', { jsonForm, containerId });
  }

  /**
  Autodock plugin UI
  */
  export async function runAutodock5(table: DG.DataFrame , ligands: DG.Column , target: string , poses: number ): Promise<void> {
    return await grok.functions.call('Docking:RunAutodock5', { table, ligands, target, poses });
  }

  export async function isApplicableAutodock(molecule: string ): Promise<boolean> {
    return await grok.functions.call('Docking:IsApplicableAutodock', { molecule });
  }

  export async function autodockWidget(molecule: any ): Promise<any> {
    return await grok.functions.call('Docking:AutodockWidget', { molecule });
  }

  export async function getAutodockSingle(molecule: any , showProperties: boolean , table: DG.DataFrame ): Promise<any> {
    return await grok.functions.call('Docking:GetAutodockSingle', { molecule, showProperties, table });
  }

  /**
  Small molecule docking to a macromolecule with pose visualization
  */
  export async function demoDocking(): Promise<void> {
    return await grok.functions.call('Docking:DemoDocking', {});
  }

  export async function autodockPanel(smiles: any ): Promise<any> {
    return await grok.functions.call('Docking:AutodockPanel', { smiles });
  }

  export async function dockingView(path?: string ): Promise<DG.View> {
    return await grok.functions.call('Docking:DockingView', { path });
  }
}
