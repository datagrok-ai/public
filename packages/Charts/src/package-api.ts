/**
This file is auto-generated by the grok api command.
If you notice any changes, please push them to the repository.
Do not edit this file manually.
*/
import * as grok from 'datagrok-api/grok';
import * as DG from 'datagrok-api/dg';


export namespace funcs {
  export async function flagCellRenderer(): Promise<any> {
    return await grok.functions.call('Charts:FlagCellRenderer', {});
  }

  /**
  Chord viewer visualizes weighted relationships between several entities
  */
  export async function chordViewerDemo(): Promise<void> {
    return await grok.functions.call('Charts:ChordViewerDemo', {});
  }

  /**
  Radar viewer is used on multivariate data to plot groups of values over several common variables
  */
  export async function radarViewerDemo(): Promise<void> {
    return await grok.functions.call('Charts:RadarViewerDemo', {});
  }

  /**
  Sankey viewer depicts a flow from one set of values to another
  */
  export async function sankeyViewerDemo(): Promise<void> {
    return await grok.functions.call('Charts:SankeyViewerDemo', {});
  }

  /**
  Sunburst viewer displays hierarchical data
  */
  export async function sunburstViewerDemo(): Promise<void> {
    return await grok.functions.call('Charts:SunburstViewerDemo', {});
  }

  /**
  Surface plot viewer displays a set of three-dimensional data as a mesh surface
  */
  export async function surfacePlotDemo(): Promise<void> {
    return await grok.functions.call('Charts:SurfacePlotDemo', {});
  }

  /**
  Timelines viewer displays the flow of events over time
  */
  export async function timelinesViewerDemo(): Promise<void> {
    return await grok.functions.call('Charts:TimelinesViewerDemo', {});
  }

  /**
  Tree viewer visualizes hierarchical data by categories
  */
  export async function treeViewerDemo(): Promise<void> {
    return await grok.functions.call('Charts:TreeViewerDemo', {});
  }

  /**
  Word Cloud viewer visualizes unstructured text data
  */
  export async function wordCloudViewerDemo(): Promise<void> {
    return await grok.functions.call('Charts:WordCloudViewerDemo', {});
  }

  /**
  Creates a chord viewer
  */
  export async function chordViewer(): Promise<any> {
    return await grok.functions.call('Charts:ChordViewer', {});
  }

  /**
  Creates a globe viewer
  */
  export async function globeViewer(): Promise<any> {
    return await grok.functions.call('Charts:GlobeViewer', {});
  }

  /**
  Creates a group analysis viewer
  */
  export async function groupAnalysisViewer(): Promise<any> {
    return await grok.functions.call('Charts:GroupAnalysisViewer', {});
  }

  /**
  Creates a multiplot viewer
  */
  export async function multiPlotViewer(): Promise<any> {
    return await grok.functions.call('Charts:MultiPlotViewer', {});
  }

  /**
  Creates a radar viewer
  */
  export async function radarViewer(): Promise<any> {
    return await grok.functions.call('Charts:RadarViewer', {});
  }

  /**
  Creates a sankey viewer
  */
  export async function sankeyViewer(): Promise<any> {
    return await grok.functions.call('Charts:SankeyViewer', {});
  }

  /**
  Creates a sunburst viewer
  */
  export async function sunburstViewer(): Promise<any> {
    return await grok.functions.call('Charts:SunburstViewer', {});
  }

  /**
  Creates a surface plot viewer
  */
  export async function surfacePlot(): Promise<any> {
    return await grok.functions.call('Charts:SurfacePlot', {});
  }

  /**
  Creates a timelines viewer
  */
  export async function timelinesViewer(): Promise<any> {
    return await grok.functions.call('Charts:TimelinesViewer', {});
  }

  /**
  Creates a tree viewer
  */
  export async function treeViewer(): Promise<any> {
    return await grok.functions.call('Charts:TreeViewer', {});
  }

  /**
  Creates a word cloud viewer
  */
  export async function wordCloudViewer(): Promise<any> {
    return await grok.functions.call('Charts:WordCloudViewer', {});
  }
}
