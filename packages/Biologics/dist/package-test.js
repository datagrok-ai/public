var biologics_test;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@datagrok-libraries/utils/src/dataframe-utils.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@datagrok-libraries/utils/src/dataframe-utils.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hashDataFrame: () => (/* binding */ hashDataFrame),
/* harmony export */   removeEmptyStringRows: () => (/* binding */ removeEmptyStringRows),
/* harmony export */   testData: () => (/* binding */ testData)
/* harmony export */ });
/* harmony import */ var datagrok_api_dg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! datagrok-api/dg */ "datagrok-api/dg");
/* harmony import */ var datagrok_api_dg__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(datagrok_api_dg__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var fast_sha256__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fast-sha256 */ "./node_modules/fast-sha256/sha256.js");
/* harmony import */ var fast_sha256__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fast_sha256__WEBPACK_IMPORTED_MODULE_1__);
/* eslint-disable max-len */


/**
 * For columns of string type. Checks whether column contains empty values and removes corresponding rows in case user selects to remove.
 *
 */
function removeEmptyStringRows(table, col) {
    const cats = col.categories;
    const emptyRawInd = cats.map((val, ind) => !val ? ind : null).filter((it) => it !== null);
    const rawData = [...col.getRawData()];
    const emptyRawsIndexes = [];
    let removedRowsCounter = 0;
    for (let i = 0; i < table.rowCount; i++) {
        if (emptyRawInd.includes(rawData[i])) {
            table.rows.removeAt(i - removedRowsCounter);
            emptyRawsIndexes.push(i);
            removedRowsCounter += 1;
        }
    }
    return emptyRawsIndexes;
}
function hashDataFrame(table, names) {
    names !== null && names !== void 0 ? names : (names = table.columns.names());
    const hasher = new fast_sha256__WEBPACK_IMPORTED_MODULE_1__.Hash();
    const order = table.getSortedOrder(names);
    const encoder = new TextEncoder();
    for (const name of names) {
        const column = table.columns.byName(name);
        const dataArray = column.getRawData();
        const isString = column.type == datagrok_api_dg__WEBPACK_IMPORTED_MODULE_0__.TYPE.STRING;
        const cats = column.categories;
        for (let i = 0; i < dataArray.length; i++) {
            if (isString) {
                const data = cats[dataArray[order[i]]];
                hasher.update(encoder.encode(data));
            }
            else {
                const data = dataArray[order[i]];
                hasher.update(Uint8Array.from([data]));
            }
        }
    }
    return hasher.digest();
}
const testData = datagrok_api_dg__WEBPACK_IMPORTED_MODULE_0__.DataFrame.fromCsv(`countries,fasta,smiles,molregno,LON,Zip Code,Street Address Line 1,ImageUrl,user_id,error_message,xray,flag,magnitude,CS-id,pdb_id,accel_a,time_offset,chart,fit,Questions,empty_number,empty_string
Belgium,MSNFHNEHVMQFYRNNLKTKGVFGRQ,CC(C(=O)OCCCc1cccnc1)c2cccc(c2)C(=O)c3ccccc3,1480014,36.276729583740234,995042300,14016 ROUTE 31W,https://datagrok.ai/img/slides/access-db-connect.png,id,ErrorMessage,"COMPND 
ATOM 
END",flag,1,1,1QBS,1,1.23,<chart></chart>,"{""series"":[{""name"":""Run:2023-08-08"",""fitFunction"":""sigmoid"",""fitLineColor"":""#1f77b4"",""pointColor"":""#1f77b4"",""showPoints"":""points"",""parameters"":[2.497360340644872, 1.7058694986686864, 5.278052678195135, 0.16000320889028383],""points"":[{""x"":0.10000000149011612,""y"":2.374499797821045},{""x"":0.6000000238418579,""y"":2.6242473125457764},{""x"":1.100000023841858,""y"":2.367267608642578},{""x"":1.600000023841858,""y"":2.6723148822784424},{""x"":2.0999999046325684,""y"":2.6537344455718994},{""x"":2.5999999046325684,""y"":2.3651671409606934},{""x"":3.0999999046325684,""y"":2.5654284954071045},{""x"":3.5999999046325684,""y"":2.4160959720611572},{""x"":4.099999904632568,""y"":2.286726713180542},{""x"":4.599999904632568,""y"":2.5100042819976807},{""x"":5.099999904632568,""y"":1.6676985025405884},{""x"":5.599999904632568,""y"":0.680136501789093},{""x"":6.099999904632568,""y"":0.3391543924808502},{""x"":6.599999904632568,""y"":0.09038983285427094},{""x"":7.099999904632568,""y"":0.19802775979042053}]},{""name"":""Run:2023-08-08"",""fitLineColor"":""#ffbb78"",""pointColor"":""#ffbb78"",""showPoints"":""points"",""parameters"":[7.525235855508179, 1.3186911876809984, 5.335672608564294, 0.7860743343958098],""points"":[{""x"":0.10000000149011612,""y"":7.988070487976074},{""x"":0.6000000238418579,""y"":7.018453121185303},{""x"":1.100000023841858,""y"":8.115279197692871},{""x"":1.600000023841858,""y"":7.486658096313477},{""x"":2.0999999046325684,""y"":7.396438121795654},{""x"":2.5999999046325684,""y"":7.477052211761475},{""x"":3.0999999046325684,""y"":6.913095474243164},{""x"":3.5999999046325684,""y"":8.01385498046875},{""x"":4.099999904632568,""y"":6.985900402069092},{""x"":4.599999904632568,""y"":6.970335960388184},{""x"":5.099999904632568,""y"":5.448817253112793},{""x"":5.599999904632568,""y"":2.5534818172454834},{""x"":6.099999904632568,""y"":1.893947958946228},{""x"":6.599999904632568,""y"":0.6340042352676392},{""x"":7.099999904632568,""y"":0.8403874039649963}]}],""chartOptions"":{""xAxisName"":""Conc."",""yAxisName"":""Activity"",""title"":""Dose-Response curves""}}",text,100,abc
Burundi,MDYKETLLMPKTDFPMRGGLPNKEPQIQEKW,COc1ccc2cc(ccc2c1)C(C)C(=O)Oc3ccc(C)cc3OC,1480015,36.276729583740234,995073444,80 STATE HIGHWAY 310,https://datagrok.ai/img/slides/access-db-connect.png,id,ErrorMessage,"COMPND 
ATOM 
END",flag,2,2,1ZP8,2,1.23,<chart></chart>,"{""series"":[{""name"":""Run:2023-08-08"",""fitFunction"":""sigmoid"",""fitLineColor"":""#1f77b4"",""pointColor"":""#1f77b4"",""showPoints"":""points"",""parameters"":[4.431460753103398, 2.1691498799246745, 5.266445597102774, 0.7825762827017926],""points"":[{""x"":0.10000000149011612,""y"":4.751083850860596},{""x"":0.6000000238418579,""y"":4.203000068664551},{""x"":1.100000023841858,""y"":4.415858745574951},{""x"":1.600000023841858,""y"":4.68414306640625},{""x"":2.0999999046325684,""y"":4.198400974273682},{""x"":2.5999999046325684,""y"":4.179222106933594},{""x"":3.0999999046325684,""y"":4.638473987579346},{""x"":3.5999999046325684,""y"":4.708553314208984},{""x"":4.099999904632568,""y"":4.291589260101318},{""x"":4.599999904632568,""y"":4.038082599639893},{""x"":5.099999904632568,""y"":3.4349939823150635},{""x"":5.599999904632568,""y"":1.2194708585739136},{""x"":6.099999904632568,""y"":1.1920831203460693},{""x"":6.599999904632568,""y"":0.5352635979652405},{""x"":7.099999904632568,""y"":0.3346920311450958}]},{""name"":""Run:2023-08-08"",""fitLineColor"":""#ffbb78"",""pointColor"":""#ffbb78"",""showPoints"":""points"",""parameters"":[2.339458017970126, -1.0734184310171178, 4.746332950550934, 0.2482416857595658],""points"":[{""x"":0.10000000149011612,""y"":0.2139337658882141},{""x"":0.6000000238418579,""y"":0.4269562065601349},{""x"":1.100000023841858,""y"":0.2441573292016983},{""x"":1.600000023841858,""y"":0.146635964512825},{""x"":2.0999999046325684,""y"":0.08818462491035461},{""x"":2.5999999046325684,""y"":0.2560656666755676},{""x"":3.0999999046325684,""y"":0.42434045672416687},{""x"":3.5999999046325684,""y"":0.37111231684684753},{""x"":4.099999904632568,""y"":0.5581737160682678},{""x"":4.599999904632568,""y"":1.183590054512024},{""x"":5.099999904632568,""y"":1.5629843473434448},{""x"":5.599999904632568,""y"":2.3211288452148438},{""x"":6.099999904632568,""y"":2.229961633682251},{""x"":6.599999904632568,""y"":2.2560226917266846},{""x"":7.099999904632568,""y"":2.2142398357391357}]}],""chartOptions"":{""xAxisName"":""Conc."",""yAxisName"":""Activity"",""title"":""Dose-Response curves""}}",text,,
Cameroon,MIEVFLFGIVLGLIPITLAGLFVTAYLQYRRGDQLDL,COc1ccc2cc(ccc2c1)C(C)C(=O)OCCCc3cccnc3,1480016,36.26095962524414,995153596,30-56 WHITESTONE EXPY,https://datagrok.ai/img/slides/access-db-connect.png,id,ErrorMessage,"COMPND 
ATOM 
END",flag,3,3,2BDJ,3,1.23,<chart></chart>,"{""series"":[{""name"":""Run:2023-08-08"",""fitFunction"":""sigmoid"",""fitLineColor"":""#1f77b4"",""pointColor"":""#1f77b4"",""showPoints"":""points"",""parameters"":[4.6760652578642325, 0.9046956320756703, 5.651408971856738, 0.07738846012184185],""points"":[{""x"":0.10000000149011612,""y"":4.32425594329834},{""x"":0.6000000238418579,""y"":4.668442249298096},{""x"":1.100000023841858,""y"":4.379785060882568},{""x"":1.600000023841858,""y"":5.0345139503479},{""x"":2.0999999046325684,""y"":4.878653526306152},{""x"":2.5999999046325684,""y"":4.3451313972473145},{""x"":3.0999999046325684,""y"":4.336992263793945},{""x"":3.5999999046325684,""y"":5.037430286407471},{""x"":4.099999904632568,""y"":5.0092692375183105},{""x"":4.599999904632568,""y"":4.151902675628662},{""x"":5.099999904632568,""y"":3.4066951274871826},{""x"":5.599999904632568,""y"":2.3732759952545166},{""x"":6.099999904632568,""y"":1.673728108406067},{""x"":6.599999904632568,""y"":0.48574790358543396},{""x"":7.099999904632568,""y"":0.2783052325248718}]},{""name"":""Run:2023-08-08"",""fitLineColor"":""#ffbb78"",""pointColor"":""#ffbb78"",""showPoints"":""points"",""parameters"":[2.938395863010111, -1.4658480661392117, 5.462702751996584, 0.3473139023615039],""points"":[{""x"":0.10000000149011612,""y"":0.4941710829734802},{""x"":0.6000000238418579,""y"":0.15323974192142487},{""x"":1.100000023841858,""y"":0.46373432874679565},{""x"":1.600000023841858,""y"":0.3370431363582611},{""x"":2.0999999046325684,""y"":0.5179030299186707},{""x"":2.5999999046325684,""y"":0.27899765968322754},{""x"":3.0999999046325684,""y"":0.22075064480304718},{""x"":3.5999999046325684,""y"":0.5789918899536133},{""x"":4.099999904632568,""y"":0.21169911324977875},{""x"":4.599999904632568,""y"":0.27857646346092224},{""x"":5.099999904632568,""y"":1.0906332731246948},{""x"":5.599999904632568,""y"":1.8520300388336182},{""x"":6.099999904632568,""y"":2.7177059650421143},{""x"":6.599999904632568,""y"":2.8680918216705322},{""x"":7.099999904632568,""y"":3.2413077354431152}]}],""chartOptions"":{""xAxisName"":""Conc."",""yAxisName"":""Activity"",""title"":""Dose-Response curves""}}",text,,
Canada,MMELVLKTIIGPIVVGVVLRIVDKWLNKDK,CC(C(=O)NCCS)c1cccc(c1)C(=O)c2ccccc2,1480017,36.26095962524414,99515,30-56 WHITESTONE EXPY,https://datagrok.ai/img/slides/access-db-connect.png,id,ErrorMessage,"COMPND 
ATOM 
END",flag,4,4,1IAN,4,1.23,<chart></chart>,"{""series"":[{""name"":""Run:2023-08-08"",""fitFunction"":""sigmoid"",""fitLineColor"":""#1f77b4"",""pointColor"":""#1f77b4"",""showPoints"":""points"",""parameters"":[0.8597390975430008, 1.0957625732481946, 5.260537067987958, 0.07974187998177736],""points"":[{""x"":0.10000000149011612,""y"":0.8190152645111084},{""x"":0.6000000238418579,""y"":0.8421689867973328},{""x"":1.100000023841858,""y"":0.8740922212600708},{""x"":1.600000023841858,""y"":0.8924275040626526},{""x"":2.0999999046325684,""y"":0.8249067664146423},{""x"":2.5999999046325684,""y"":0.9327669143676758},{""x"":3.0999999046325684,""y"":0.8522974252700806},{""x"":3.5999999046325684,""y"":0.8174492716789246},{""x"":4.099999904632568,""y"":0.8394647240638733},{""x"":4.599999904632568,""y"":0.7139387726783752},{""x"":5.099999904632568,""y"":0.5561167597770691},{""x"":5.599999904632568,""y"":0.3276226818561554},{""x"":6.099999904632568,""y"":0.12479474395513535},{""x"":6.599999904632568,""y"":0.13006797432899475},{""x"":7.099999904632568,""y"":0.059702079743146896}]},{""name"":""Run:2023-08-08"",""fitLineColor"":""#ffbb78"",""pointColor"":""#ffbb78"",""showPoints"":""points"",""parameters"":[5.760930219582546, 1.6591793293833013, 4.667155929720851, 0.7858109544121652],""points"":[{""x"":0.10000000149011612,""y"":6.156993389129639},{""x"":0.6000000238418579,""y"":5.236701965332031},{""x"":1.100000023841858,""y"":6.010560512542725},{""x"":1.600000023841858,""y"":5.495512962341309},{""x"":2.0999999046325684,""y"":6.087770462036133},{""x"":2.5999999046325684,""y"":5.79986572265625},{""x"":3.0999999046325684,""y"":5.597546577453613},{""x"":3.5999999046325684,""y"":5.520902156829834},{""x"":4.099999904632568,""y"":5.360654354095459},{""x"":4.599999904632568,""y"":3.5539746284484863},{""x"":5.099999904632568,""y"":1.577236294746399},{""x"":5.599999904632568,""y"":1.0001264810562134},{""x"":6.099999904632568,""y"":0.9305797815322876},{""x"":6.599999904632568,""y"":0.6033638715744019},{""x"":7.099999904632568,""y"":0.4203685522079468}]}],""chartOptions"":{""xAxisName"":""Conc."",""yAxisName"":""Activity"",""title"":""Dose-Response curves""}}",text,,
Colombia,MDRTDEVSNHTHDKPTLTWFEEIFEEYHSPFHN,FC(F)(F)c1ccc(OC2CCNCC2)cc1,1480029,36.3309440612793,995152050,1 COURT HOUSE SQUARE,https://datagrok.ai/img/slides/access-db-connect.png,id,ErrorMessage,"COMPND 
ATOM 
END",flag,5,5,4UJ1,5,1.23,<chart></chart>,"{""series"":[{""name"":""Run:2023-08-08"",""fitFunction"":""sigmoid"",""fitLineColor"":""#1f77b4"",""pointColor"":""#1f77b4"",""showPoints"":""points"",""parameters"":[6.4995088314153655, 2.4270351004539914, 5.178659535348579, 0.625653346241577],""points"":[{""x"":0.10000000149011612,""y"":6.496231555938721},{""x"":0.6000000238418579,""y"":6.42543363571167},{""x"":1.100000023841858,""y"":7.040063858032227},{""x"":1.600000023841858,""y"":6.1115403175354},{""x"":2.0999999046325684,""y"":6.680728435516357},{""x"":2.5999999046325684,""y"":6.406774520874023},{""x"":3.0999999046325684,""y"":6.611269474029541},{""x"":3.5999999046325684,""y"":5.889094352722168},{""x"":4.099999904632568,""y"":6.75344705581665},{""x"":4.599999904632568,""y"":6.361435890197754},{""x"":5.099999904632568,""y"":4.1666975021362305},{""x"":5.599999904632568,""y"":1.172118902206421},{""x"":6.099999904632568,""y"":0.801048994064331},{""x"":6.599999904632568,""y"":0.4640021026134491},{""x"":7.099999904632568,""y"":0.0010357667924836278}]},{""name"":""Run:2023-08-08"",""fitLineColor"":""#ffbb78"",""pointColor"":""#ffbb78"",""showPoints"":""points"",""parameters"":[1.4734381347446401, 1.1649805188074196, 4.82958608866421, 0.09500545496710007],""points"":[{""x"":0.10000000149011612,""y"":1.5279096364974976},{""x"":0.6000000238418579,""y"":1.3559974431991577},{""x"":1.100000023841858,""y"":1.5246378183364868},{""x"":1.600000023841858,""y"":1.5567657947540283},{""x"":2.0999999046325684,""y"":1.4114240407943726},{""x"":2.5999999046325684,""y"":1.4045010805130005},{""x"":3.0999999046325684,""y"":1.4769829511642456},{""x"":3.5999999046325684,""y"":1.4875500202178955},{""x"":4.099999904632568,""y"":1.2991987466812134},{""x"":4.599999904632568,""y"":0.922961413860321},{""x"":5.099999904632568,""y"":0.6520044803619385},{""x"":5.599999904632568,""y"":0.15350978076457977},{""x"":6.099999904632568,""y"":0.1078903079032898},{""x"":6.599999904632568,""y"":0.17276449501514435},{""x"":7.099999904632568,""y"":0.14066608250141144}]}],""chartOptions"":{""xAxisName"":""Conc."",""yAxisName"":""Activity"",""title"":""Dose-Response curves""}}",text,,
Costa Rica,MKSTKEEIQTIKTLLKDSRTAKYHKRLQIVL,CC(C)Cc1ccc(cc1)C(C)C(=O)N2CCCC2C(=O)OCCCc3ccccc3,1480018,36.3309440612793,995084218,4041 SOUTHWESTERN BLVD,https://datagrok.ai/img/slides/access-db-connect.png,id,ErrorMessage,"COMPND 
ATOM 
END",flag,6,6,2BPW,6,1.23,<chart></chart>,"{""series"":[{""name"":""Run:2023-08-08"",""fitFunction"":""sigmoid"",""fitLineColor"":""#1f77b4"",""pointColor"":""#1f77b4"",""showPoints"":""points"",""parameters"":[2.4833641843311227, -1.8945978742090062, 4.671127708092568, 0.24159861311815153],""points"":[{""x"":0.10000000149011612,""y"":0.0969524160027504},{""x"":0.6000000238418579,""y"":0.028483040630817413},{""x"":1.100000023841858,""y"":0.22087176144123077},{""x"":1.600000023841858,""y"":0.0068915546871721745},{""x"":2.0999999046325684,""y"":0.4305879771709442},{""x"":2.5999999046325684,""y"":0.44774115085601807},{""x"":3.0999999046325684,""y"":0.45346319675445557},{""x"":3.5999999046325684,""y"":0.2370593100786209},{""x"":4.099999904632568,""y"":0.4657953977584839},{""x"":4.599999904632568,""y"":1.155200719833374},{""x"":5.099999904632568,""y"":2.2294070720672607},{""x"":5.599999904632568,""y"":2.4311530590057373},{""x"":6.099999904632568,""y"":2.33846116065979},{""x"":6.599999904632568,""y"":2.608201026916504},{""x"":7.099999904632568,""y"":2.8136143684387207}]},{""name"":""Run:2023-08-08"",""fitLineColor"":""#ffbb78"",""pointColor"":""#ffbb78"",""showPoints"":""points"",""parameters"":[5.224573521642033, 1.4454033924198528, 5.6014197746076535, 0.2823216054197577],""points"":[{""x"":0.10000000149011612,""y"":4.95027494430542},{""x"":0.6000000238418579,""y"":5.1754679679870605},{""x"":1.100000023841858,""y"":5.276752948760986},{""x"":1.600000023841858,""y"":5.589294910430908},{""x"":2.0999999046325684,""y"":5.616994857788086},{""x"":2.5999999046325684,""y"":5.120813846588135},{""x"":3.0999999046325684,""y"":5.340766906738281},{""x"":3.5999999046325684,""y"":4.876471042633057},{""x"":4.099999904632568,""y"":4.94999361038208},{""x"":4.599999904632568,""y"":5.162564754486084},{""x"":5.099999904632568,""y"":4.399557590484619},{""x"":5.599999904632568,""y"":2.7977969646453857},{""x"":6.099999904632568,""y"":1.0229872465133667},{""x"":6.599999904632568,""y"":0.48275601863861084},{""x"":7.099999904632568,""y"":0.10408931970596313}]}],""chartOptions"":{""xAxisName"":""Conc."",""yAxisName"":""Activity"",""title"":""Dose-Response curves""}}",text,,
Cuba,MHAILRYFIRRLFYHIFYKIYSLISKKHQSLPSDVRQF,COc1ccc2c(c1)c(CC(=O)N3CCCC3C(=O)Oc4ccc(C)cc4OC)c(C)n2C(=O)c5ccc(Cl)cc5,1480019,36.33115768432617,995081928,1227 US HIGHWAY 11,https://datagrok.ai/img/slides/access-db-connect.png,id,ErrorMessage,"COMPND 
ATOM 
END",flag,7,7,1QBS,7,1.23,<chart></chart>,"{""series"":[{""name"":""Run:2023-08-08"",""fitFunction"":""sigmoid"",""fitLineColor"":""#1f77b4"",""pointColor"":""#1f77b4"",""showPoints"":""points"",""parameters"":[3.320838679713925, -1.2421619987316728, 4.831325425225256, 0.3236011098403072],""points"":[{""x"":0.10000000149011612,""y"":0.3727470338344574},{""x"":0.6000000238418579,""y"":0.12365014106035233},{""x"":1.100000023841858,""y"":0.48422467708587646},{""x"":1.600000023841858,""y"":0.2264465093612671},{""x"":2.0999999046325684,""y"":0.16821794211864471},{""x"":2.5999999046325684,""y"":0.3879014551639557},{""x"":3.0999999046325684,""y"":0.5470244884490967},{""x"":3.5999999046325684,""y"":0.3419053554534912},{""x"":4.099999904632568,""y"":0.7655120491981506},{""x"":4.599999904632568,""y"":1.2346516847610474},{""x"":5.099999904632568,""y"":2.453336715698242},{""x"":5.599999904632568,""y"":2.9565491676330566},{""x"":6.099999904632568,""y"":3.335299491882324},{""x"":6.599999904632568,""y"":3.240290880203247},{""x"":7.099999904632568,""y"":3.1107218265533447}]},{""name"":""Run:2023-08-08"",""fitLineColor"":""#ffbb78"",""pointColor"":""#ffbb78"",""showPoints"":""points"",""parameters"":[3.6401853521511094, 1.26211588875013, 5.399028074402744, 0.5089580830068091],""points"":[{""x"":0.10000000149011612,""y"":3.8585598468780518},{""x"":0.6000000238418579,""y"":3.6077206134796143},{""x"":1.100000023841858,""y"":3.855252265930176},{""x"":1.600000023841858,""y"":3.619039297103882},{""x"":2.0999999046325684,""y"":3.839388370513916},{""x"":2.5999999046325684,""y"":3.335283041000366},{""x"":3.0999999046325684,""y"":3.571141481399536},{""x"":3.5999999046325684,""y"":3.4155046939849854},{""x"":4.099999904632568,""y"":3.7316646575927734},{""x"":4.599999904632568,""y"":3.0680155754089355},{""x"":5.099999904632568,""y"":2.891066551208496},{""x"":5.599999904632568,""y"":1.6022753715515137},{""x"":6.099999904632568,""y"":0.7652576565742493},{""x"":6.599999904632568,""y"":0.6875326037406921},{""x"":7.099999904632568,""y"":0.5828871726989746}]}],""chartOptions"":{""xAxisName"":""Conc."",""yAxisName"":""Activity"",""title"":""Dose-Response curves""}}",text,,
Italy,MSNFHNEHVMQFYRNNLKTKGVFGRQ,CC(C)Cc1ccc(cc1)C(C)C(=O)N2CCCC2C(=O)OCCO[N+](=O)[O-],1480020,36.33115768432617,99502,"168-46 91ST AVE., 2ND FLR",https://datagrok.ai/img/slides/access-db-connect.png,id,ErrorMessage,"COMPND 
ATOM 
END",flag,8,8,1ZP8,8,1.23,<chart></chart>,"{""series"":[{""name"":""Run:2023-08-08"",""fitFunction"":""sigmoid"",""fitLineColor"":""#1f77b4"",""pointColor"":""#1f77b4"",""showPoints"":""points"",""parameters"":[2.293592105923809, 1.3781586549141835, 5.1025898038676605, 0.03493851245291291],""points"":[{""x"":0.10000000149011612,""y"":2.1287283897399902},{""x"":0.6000000238418579,""y"":2.267972230911255},{""x"":1.100000023841858,""y"":2.398442506790161},{""x"":1.600000023841858,""y"":2.5130622386932373},{""x"":2.0999999046325684,""y"":2.3255116939544678},{""x"":2.5999999046325684,""y"":2.127340793609619},{""x"":3.0999999046325684,""y"":2.47259783744812},{""x"":3.5999999046325684,""y"":2.131181478500366},{""x"":4.099999904632568,""y"":2.090421438217163},{""x"":4.599999904632568,""y"":2.02299165725708},{""x"":5.099999904632568,""y"":1.1105059385299683},{""x"":5.599999904632568,""y"":0.4494485855102539},{""x"":6.099999904632568,""y"":0.1375635862350464},{""x"":6.599999904632568,""y"":0.036351121962070465},{""x"":7.099999904632568,""y"":0.1619771122932434}]},{""name"":""Run:2023-08-08"",""fitLineColor"":""#ffbb78"",""pointColor"":""#ffbb78"",""showPoints"":""points"",""parameters"":[5.953125499439879, 1.2528620255306528, 5.187637440149802, 0.3110348753260886],""points"":[{""x"":0.10000000149011612,""y"":5.6585283279418945},{""x"":0.6000000238418579,""y"":5.911152362823486},{""x"":1.100000023841858,""y"":5.924920082092285},{""x"":1.600000023841858,""y"":5.8469438552856445},{""x"":2.0999999046325684,""y"":5.929472923278809},{""x"":2.5999999046325684,""y"":6.190037727355957},{""x"":3.0999999046325684,""y"":6.236179828643799},{""x"":3.5999999046325684,""y"":6.141019344329834},{""x"":4.099999904632568,""y"":5.295210838317871},{""x"":4.599999904632568,""y"":5.265801906585693},{""x"":5.099999904632568,""y"":3.3722851276397705},{""x"":5.599999904632568,""y"":1.8299226760864258},{""x"":6.099999904632568,""y"":0.32690900564193726},{""x"":6.599999904632568,""y"":0.6274543404579163},{""x"":7.099999904632568,""y"":0.8441857099533081}]}],""chartOptions"":{""xAxisName"":""Conc."",""yAxisName"":""Activity"",""title"":""Dose-Response curves""}}",text,,
Rwanda,MPNSEPASLLELFNSIATQGELVRSLKAGNASK,CC(C)Cc1ccc(cc1)C(C)C(=O)N2CCCC2C(=O)OCCO,1480021,36.33137130737305,995037247,"168-46 91ST AVE., 2ND FLR",https://datagrok.ai/img/slides/access-db-connect.png,id,ErrorMessage,"COMPND 
ATOM 
END",flag,9,9,2BDJ,9,1.23,<chart></chart>,"{""series"":[{""name"":""Run:2023-08-08"",""fitFunction"":""sigmoid"",""fitLineColor"":""#1f77b4"",""pointColor"":""#1f77b4"",""showPoints"":""points"",""parameters"":[3.8209972202654474, 1.3779216716448506, 5.299882228439686, 0.06040645519069608],""points"":[{""x"":0.10000000149011612,""y"":3.7821109294891357},{""x"":0.6000000238418579,""y"":3.542433023452759},{""x"":1.100000023841858,""y"":3.7008674144744873},{""x"":1.600000023841858,""y"":3.717301607131958},{""x"":2.0999999046325684,""y"":4.024452209472656},{""x"":2.5999999046325684,""y"":4.013899326324463},{""x"":3.0999999046325684,""y"":3.945094347000122},{""x"":3.5999999046325684,""y"":3.866621971130371},{""x"":4.099999904632568,""y"":3.7461626529693604},{""x"":4.599999904632568,""y"":3.3454740047454834},{""x"":5.099999904632568,""y"":2.61944317817688},{""x"":5.599999904632568,""y"":0.999405026435852},{""x"":6.099999904632568,""y"":0.46259793639183044},{""x"":6.599999904632568,""y"":0.054134611040353775},{""x"":7.099999904632568,""y"":0.05711187422275543}]},{""name"":""Run:2023-08-08"",""fitLineColor"":""#ffbb78"",""pointColor"":""#ffbb78"",""showPoints"":""points"",""parameters"":[5.6318079657726035, 1.8495493770000595, 5.391793312471116, 0.17060707587348442],""points"":[{""x"":0.10000000149011612,""y"":5.458079814910889},{""x"":0.6000000238418579,""y"":5.554427146911621},{""x"":1.100000023841858,""y"":5.799983024597168},{""x"":1.600000023841858,""y"":5.364140033721924},{""x"":2.0999999046325684,""y"":5.864485740661621},{""x"":2.5999999046325684,""y"":5.4509806632995605},{""x"":3.0999999046325684,""y"":5.702574729919434},{""x"":3.5999999046325684,""y"":5.7314534187316895},{""x"":4.099999904632568,""y"":5.5123443603515625},{""x"":4.599999904632568,""y"":5.724395751953125},{""x"":5.099999904632568,""y"":4.354506969451904},{""x"":5.599999904632568,""y"":1.7307666540145874},{""x"":6.099999904632568,""y"":0.6305936574935913},{""x"":6.599999904632568,""y"":0.035183437168598175},{""x"":7.099999904632568,""y"":0.7575169205665588}]}],""chartOptions"":{""xAxisName"":""Conc."",""yAxisName"":""Activity"",""title"":""Dose-Response curves""}}",text,,
Switzerland,IRVVGRYLIEVWKAAGMDMDKVLFLWSSDEI,CN1CCC(CC1)Oc2ccc(cc2)C(F)(F)F,1480028,36.33137130737305,99504,92-11 179TH PLACE,https://datagrok.ai/img/slides/access-db-connect.png,id,ErrorMessage,"COMPND 
ATOM 
END",flag,9,10,1IAN,10,1.23,<chart></chart>,"{""series"":[{""name"":""Run:2023-08-08"",""fitFunction"":""sigmoid"",""fitLineColor"":""#1f77b4"",""pointColor"":""#1f77b4"",""showPoints"":""points"",""parameters"":[1.1190255865097471, 2.3163895161544437, 5.4968866182279195, 0.2035204047289052],""points"":[{""x"":0.10000000149011612,""y"":1.1057683229446411},{""x"":0.6000000238418579,""y"":1.1019697189331055},{""x"":1.100000023841858,""y"":1.0818607807159424},{""x"":1.600000023841858,""y"":1.062997817993164},{""x"":2.0999999046325684,""y"":1.046447515487671},{""x"":2.5999999046325684,""y"":1.1217249631881714},{""x"":3.0999999046325684,""y"":1.2166996002197266},{""x"":3.5999999046325684,""y"":1.215477705001831},{""x"":4.099999904632568,""y"":1.0581893920898438},{""x"":4.599999904632568,""y"":1.1747995615005493},{""x"":5.099999904632568,""y"":1.0181127786636353},{""x"":5.599999904632568,""y"":0.5344523191452026},{""x"":6.099999904632568,""y"":0.2569526433944702},{""x"":6.599999904632568,""y"":0.1912207305431366},{""x"":7.099999904632568,""y"":0.15060538053512573}]},{""name"":""Run:2023-08-08"",""fitLineColor"":""#ffbb78"",""pointColor"":""#ffbb78"",""showPoints"":""points"",""parameters"":[3.1038581025805785, 2.0032224204185245, 5.087602825989163, 0.13277988512492753],""points"":[{""x"":0.10000000149011612,""y"":3.0498509407043457},{""x"":0.6000000238418579,""y"":2.805217742919922},{""x"":1.100000023841858,""y"":3.3415253162384033},{""x"":1.600000023841858,""y"":3.0549843311309814},{""x"":2.0999999046325684,""y"":3.250074863433838},{""x"":2.5999999046325684,""y"":3.0432586669921875},{""x"":3.0999999046325684,""y"":3.265852451324463},{""x"":3.5999999046325684,""y"":2.9475724697113037},{""x"":4.099999904632568,""y"":3.1929898262023926},{""x"":4.599999904632568,""y"":2.7460060119628906},{""x"":5.099999904632568,""y"":1.6175861358642578},{""x"":5.599999904632568,""y"":0.3006608486175537},{""x"":6.099999904632568,""y"":0.3444803059101105},{""x"":6.599999904632568,""y"":0.015537971630692482},{""x"":7.099999904632568,""y"":0.5527358055114746}]}],""chartOptions"":{""xAxisName"":""Conc."",""yAxisName"":""Activity"",""title"":""Dose-Response curves""}}",text,,
,,,,,,,,,,,,,,,,,,,,,`);
testData.columns.add(datagrok_api_dg__WEBPACK_IMPORTED_MODULE_0__.Column.fromList(datagrok_api_dg__WEBPACK_IMPORTED_MODULE_0__.TYPE.BYTE_ARRAY, 'BinaryImage', Array.from(new Uint8Array(11))));
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./node_modules/@datagrok-libraries/utils/src/test-viewer-utils.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@datagrok-libraries/utils/src/test-viewer-utils.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   changeOptionsSaveLayout: () => (/* binding */ changeOptionsSaveLayout),
/* harmony export */   createViewer: () => (/* binding */ createViewer),
/* harmony export */   filterAsync: () => (/* binding */ filterAsync),
/* harmony export */   loadLayout: () => (/* binding */ loadLayout),
/* harmony export */   selectFilterChangeCurrent: () => (/* binding */ selectFilterChangeCurrent),
/* harmony export */   testViewerInternal: () => (/* binding */ testViewerInternal)
/* harmony export */ });
/* harmony import */ var datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! datagrok-api/grok */ "datagrok-api/grok");
/* harmony import */ var datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _test__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./test */ "./node_modules/@datagrok-libraries/utils/src/test.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


function createViewer(tv, v, packageName) {
    return __awaiter(this, void 0, void 0, function* () {
        let res;
        if (packageName) {
            res = (yield tv.dataFrame.plot.fromType(v));
            tv.dockManager.dock(res);
        }
        else
            res = tv.addViewer(v);
        return res;
    });
}
;
function testViewerInternal(tv, viewerName, packageName, event, actions, awaitViewer, layout, actionArgs, actionsWithDelay = true) {
    return __awaiter(this, void 0, void 0, function* () {
        let actionsRes = null;
        yield (0,_test__WEBPACK_IMPORTED_MODULE_1__.testEventAsync)(event, (e) => __awaiter(this, void 0, void 0, function* () {
            let viewer = null;
            for (const v1 of tv.viewers) {
                if (v1.type === viewerName)
                    viewer = v1;
            }
            if (!viewer)
                throw Error('Viewer hasn\'t been added');
            yield Promise.resolve(); //re schedules subsequent commands into microtask
            if (awaitViewer)
                yield awaitViewer(viewer);
            if (actions) {
                const args = actionArgs !== null && actionArgs !== void 0 ? actionArgs : {};
                args.tv = tv;
                args.viewer = viewer;
                actionsRes = yield actions(args, actionsWithDelay);
            }
            //check that there are no active subscriptions in the viewer after close
            yield (0,_test__WEBPACK_IMPORTED_MODULE_1__.testEvent)(datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.events.onViewerClosed, () => {
                (0,_test__WEBPACK_IMPORTED_MODULE_1__.expect)(viewer.subs.some((s) => !s.closed), false);
            }, () => viewer.close(), 3000);
        }), () => __awaiter(this, void 0, void 0, function* () {
            layout ? tv.loadLayout(layout) : yield createViewer(tv, viewerName, packageName);
        }), 60000, 'TEST_EVENT_ASYNC');
        if (actionsRes)
            return actionsRes;
    });
}
function selectFilterChangeCurrent(args, withDelay = true) {
    return __awaiter(this, void 0, void 0, function* () {
        const currentDf = args.tv.dataFrame;
        const dfSaved = currentDf.clone();
        //remove values in the first row
        Array.from(currentDf.row(0).cells).forEach((c) => c.value = null);
        //selection
        const num = currentDf.rowCount < 20 ? Math.floor(currentDf.rowCount / 2) : 10;
        currentDf.rows.select((row) => row.idx >= 0 && row.idx < num);
        if (withDelay)
            yield (0,_test__WEBPACK_IMPORTED_MODULE_1__.delay)(50);
        //filter
        for (let i = num; i < num * 2; i++)
            currentDf.filter.set(i, false);
        if (withDelay)
            yield (0,_test__WEBPACK_IMPORTED_MODULE_1__.delay)(50);
        //change current row
        currentDf.currentRowIdx = 1;
        //remove columns
        currentDf.columns.names().slice(0, Math.ceil(currentDf.columns.length / 2))
            .forEach((c) => currentDf.columns.remove(c));
        if (withDelay)
            yield (0,_test__WEBPACK_IMPORTED_MODULE_1__.delay)(100);
        //set back initial df with whole set of columns and preserved data
        args.tv.dataFrame = dfSaved;
        yield (0,_test__WEBPACK_IMPORTED_MODULE_1__.delay)(50);
    });
}
function filterAsync(args, withDelay = true) {
    return __awaiter(this, void 0, void 0, function* () {
        const currentDf = args.tv.dataFrame;
        setTimeout(() => currentDf.filter.set(0, !currentDf.filter.get(0)), 0);
    });
}
function changeOptionsSaveLayout(args, withDelay = true) {
    return __awaiter(this, void 0, void 0, function* () {
        //get current options and properties
        let optns;
        try {
            optns = args.viewer.getOptions(true).look;
        }
        catch (err) {
            //@ts-ignore
            throw new Error(`Viewer's .getOptions() error.`, { cause: err });
        }
        let props;
        try {
            props = args.viewer.getProperties();
        }
        catch (err) {
            //@ts-ignore
            throw new Error(`Viewer's .getProperties() error.`, { cause: err });
        }
        //change options and properties
        const newProps = {};
        Object.keys(optns).filter((k) => typeof optns[k] === 'boolean').forEach((k) => newProps[k] = !optns[k]);
        props.filter((p) => p.choices !== null)
            .forEach((p) => newProps[p.name] = p.choices.find((c) => c !== optns[p.name]));
        //set new options
        args.viewer.setOptions(newProps);
        yield (0,_test__WEBPACK_IMPORTED_MODULE_1__.delay)(300);
        const layout = args.tv.saveLayout();
        const savedLook = args.viewer.getOptions().look;
        return { layout: layout, savedProps: savedLook };
    });
}
function loadLayout(args, withDelay = true) {
    return __awaiter(this, void 0, void 0, function* () {
        (0,_test__WEBPACK_IMPORTED_MODULE_1__.expect)(JSON.stringify(args.viewer.getOptions().look), JSON.stringify(args.savedProps));
    });
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./node_modules/@datagrok-libraries/utils/src/test.js":
/*!************************************************************!*\
  !*** ./node_modules/@datagrok-libraries/utils/src/test.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Category: () => (/* binding */ Category),
/* harmony export */   Test: () => (/* binding */ Test),
/* harmony export */   TestContext: () => (/* binding */ TestContext),
/* harmony export */   TestExecutionOptions: () => (/* binding */ TestExecutionOptions),
/* harmony export */   after: () => (/* binding */ after),
/* harmony export */   assure: () => (/* binding */ assure),
/* harmony export */   awaitCheck: () => (/* binding */ awaitCheck),
/* harmony export */   before: () => (/* binding */ before),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   currentCategory: () => (/* binding */ currentCategory),
/* harmony export */   delay: () => (/* binding */ delay),
/* harmony export */   expect: () => (/* binding */ expect),
/* harmony export */   expectArray: () => (/* binding */ expectArray),
/* harmony export */   expectExceptionAsync: () => (/* binding */ expectExceptionAsync),
/* harmony export */   expectFloat: () => (/* binding */ expectFloat),
/* harmony export */   expectObject: () => (/* binding */ expectObject),
/* harmony export */   expectTable: () => (/* binding */ expectTable),
/* harmony export */   initAutoTests: () => (/* binding */ initAutoTests),
/* harmony export */   isDialogPresent: () => (/* binding */ isDialogPresent),
/* harmony export */   runTests: () => (/* binding */ runTests),
/* harmony export */   shuffle: () => (/* binding */ shuffle),
/* harmony export */   test: () => (/* binding */ test),
/* harmony export */   testEvent: () => (/* binding */ testEvent),
/* harmony export */   testEventAsync: () => (/* binding */ testEventAsync),
/* harmony export */   testViewer: () => (/* binding */ testViewer),
/* harmony export */   tests: () => (/* binding */ tests),
/* harmony export */   timeout: () => (/* binding */ timeout)
/* harmony export */ });
/* harmony import */ var datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! datagrok-api/grok */ "datagrok-api/grok");
/* harmony import */ var datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! datagrok-api/dg */ "datagrok-api/dg");
/* harmony import */ var datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _dataframe_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataframe-utils */ "./node_modules/@datagrok-libraries/utils/src/dataframe-utils.js");
/* harmony import */ var _test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./test-viewer-utils */ "./node_modules/@datagrok-libraries/utils/src/test-viewer-utils.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




const STANDART_TIMEOUT = 30000;
const BENCHMARK_TIMEOUT = 10800000;
const stdLog = console.log.bind(console);
const stdInfo = console.info.bind(console);
const stdWarn = console.warn.bind(console);
const stdError = console.error.bind(console);
const tests = {};
const autoTestsCatName = 'Auto Tests';
const demoCatName = 'Demo';
const detectorsCatName = 'Detectors';
const coreCatName = 'Core';
const wasRegistered = {};
let currentCategory;
var assure;
(function (assure) {
    function notNull(value, name) {
        if (value == null)
            throw new Error(`${name == null ? 'Value' : name} not defined`);
    }
    assure.notNull = notNull;
})(assure || (assure = {}));
class TestContext {
    constructor(catchUnhandled, report) {
        this.catchUnhandled = true;
        this.report = false;
        if (catchUnhandled !== undefined)
            this.catchUnhandled = catchUnhandled;
        if (report !== undefined)
            this.report = report;
    }
    ;
}
class Test {
    constructor(category, name, test, options) {
        var _a;
        this.category = category;
        this.name = name;
        options !== null && options !== void 0 ? options : (options = {});
        (_a = options.timeout) !== null && _a !== void 0 ? _a : (options.timeout = STANDART_TIMEOUT);
        this.options = options;
        this.test = () => __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                var _b;
                let result = '';
                try {
                    if (datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Test.isInDebug)
                        debugger;
                    let res = yield test();
                    try {
                        result = (_b = res === null || res === void 0 ? void 0 : res.toString()) !== null && _b !== void 0 ? _b : '';
                    }
                    catch (e) {
                        result = 'Can\'t convert test\'s result to string';
                        console.error(`Can\'t convert test\'s result to string in the ${this.category}:${this.name} test`);
                    }
                }
                catch (e) {
                    reject(e);
                }
                resolve(result);
            }));
        });
    }
}
class Category {
}
class TestExecutionOptions {
}
function testEvent(event, handler, trigger, ms = 0, reason = `timeout`) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            const sub = event.subscribe((args) => {
                try {
                    handler(args);
                    resolve('OK');
                }
                catch (e) {
                    reject(e);
                }
                finally {
                    sub.unsubscribe();
                    clearTimeout(timeout);
                }
            });
            const timeout = setTimeout(() => {
                sub.unsubscribe();
                // eslint-disable-next-line prefer-promise-reject-errors
                reject(reason);
            }, ms);
            trigger();
        });
    });
}
function testEventAsync(event, handler, trigger, ms = 0, reason = `timeout`) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            const sub = event.subscribe((args) => {
                handler(args).then(() => {
                    resolve('OK');
                }).catch((e) => {
                    reject(e);
                }).finally(() => {
                    sub.unsubscribe();
                    clearTimeout(timeout);
                });
            });
            const timeout = setTimeout(() => {
                sub.unsubscribe();
                // eslint-disable-next-line prefer-promise-reject-errors
                reject(reason);
            }, ms);
            trigger();
        });
    });
}
function test(name, test, options) {
    if (tests[currentCategory] == undefined)
        tests[currentCategory] = {};
    if (tests[currentCategory].tests == undefined)
        tests[currentCategory].tests = [];
    tests[currentCategory].tests.push(new Test(currentCategory, name, test, options));
}
/* Tests two objects for equality, throws an exception if they are not equal. */
function expect(actual, expected = true, error) {
    if (error)
        error = `${error}, `;
    else
        error = '';
    if (actual !== expected)
        throw new Error(`${error}Expected "${expected}", got "${actual}"`);
}
function expectFloat(actual, expected, tolerance = 0.001, error) {
    if ((actual === Number.POSITIVE_INFINITY && expected === Number.POSITIVE_INFINITY) ||
        (actual === Number.NEGATIVE_INFINITY && expected === Number.NEGATIVE_INFINITY) ||
        (actual === Number.NaN && expected === Number.NaN) || (isNaN(actual) && isNaN(expected)))
        return;
    const areEqual = Math.abs(actual - expected) < tolerance;
    expect(areEqual, true, `${error !== null && error !== void 0 ? error : ''} (tolerance = ${tolerance})`);
    if (!areEqual)
        throw new Error(`Expected ${expected}, got ${actual} (tolerance = ${tolerance})`);
}
function expectTable(actual, expected, error) {
    const expectedRowCount = expected.rowCount;
    const actualRowCount = actual.rowCount;
    expect(actualRowCount, expectedRowCount, `${error !== null && error !== void 0 ? error : ''}, row count`);
    for (const column of expected.columns) {
        const actualColumn = actual.columns.byName(column.name);
        if (actualColumn == null)
            throw new Error(`Column ${column.name} not found`);
        if (actualColumn.type != column.type)
            throw new Error(`Column ${column.name} type expected ${column.type} got ${actualColumn.type}`);
        for (let i = 0; i < expectedRowCount; i++) {
            const value = column.get(i);
            const actualValue = actualColumn.get(i);
            if (column.type == datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.TYPE.FLOAT)
                expectFloat(actualValue, value, 0.0001, error);
            else if (column.type == datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.TYPE.DATE_TIME)
                expect(actualValue.isSame(value), true, error);
            else
                expect(actualValue, value, error);
        }
    }
}
function expectObject(actual, expected) {
    for (const [expectedKey, expectedValue] of Object.entries(expected)) {
        if (!actual.hasOwnProperty(expectedKey))
            throw new Error(`Expected property "${expectedKey}" not found`);
        const actualValue = actual[expectedKey];
        if (actualValue instanceof Array && expectedValue instanceof Array)
            expectArray(actualValue, expectedValue);
        else if (actualValue instanceof Object && expectedValue instanceof Object)
            expectObject(actualValue, expectedValue);
        else if (Number.isFinite(actualValue) && Number.isFinite(expectedValue))
            expectFloat(actualValue, expectedValue);
        else if (actualValue != expectedValue)
            throw new Error(`Expected (${expectedValue}) for key '${expectedKey}', got (${actualValue})`);
    }
}
function expectArray(actual, expected) {
    const actualLength = actual.length;
    const expectedLength = expected.length;
    if (actualLength != expectedLength) {
        throw new Error(`Arrays are of different length: actual array length is ${actualLength} ` +
            `and expected array length is ${expectedLength}`);
    }
    for (let i = 0; i < actualLength; i++) {
        if (actual[i] instanceof Array && expected[i] instanceof Array)
            expectArray(actual[i], expected[i]);
        else if (actual[i] instanceof Object && expected[i] instanceof Object)
            expectObject(actual[i], expected[i]);
        else if (actual[i] != expected[i])
            throw new Error(`Expected ${expected[i]} at position ${i}, got ${actual[i]}`);
    }
}
/* Defines a test suite. */
function category(category, tests_, options) {
    var _a;
    currentCategory = category;
    tests_();
    if (tests[currentCategory]) {
        tests[currentCategory].clear = (_a = options === null || options === void 0 ? void 0 : options.clear) !== null && _a !== void 0 ? _a : true;
        tests[currentCategory].timeout = options === null || options === void 0 ? void 0 : options.timeout;
        tests[currentCategory].benchmarks = options === null || options === void 0 ? void 0 : options.benchmarks;
        tests[currentCategory].stressTests = options === null || options === void 0 ? void 0 : options.stressTests;
        tests[currentCategory].owner = options === null || options === void 0 ? void 0 : options.owner;
    }
}
/* Defines a function to be executed before the tests in this category are executed. */
function before(before) {
    if (tests[currentCategory] == undefined)
        tests[currentCategory] = {};
    tests[currentCategory].before = before;
}
/* Defines a function to be executed after the tests in this category are executed. */
function after(after) {
    if (tests[currentCategory] == undefined)
        tests[currentCategory] = {};
    tests[currentCategory].after = after;
}
function addNamespace(s, f) {
    return s.replace(new RegExp(f.name, 'gi'), f.nqName);
}
function initAutoTests(package_, module) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    return __awaiter(this, void 0, void 0, function* () {
        const packageId = package_.id;
        if (wasRegistered[packageId])
            return;
        const moduleTests = module ? module.tests : tests;
        if (package_.name === 'DevTools' || (!!module && module._package.name === 'DevTools')) {
            for (const f of window.dartTests) {
                const arr = f.name.split(/\s*\|\s*!/g);
                let name = (_a = arr.pop()) !== null && _a !== void 0 ? _a : f.name;
                let cat = arr.length ? coreCatName + ': ' + arr.join(': ') : coreCatName;
                let fullName = name.split(' | ');
                name = fullName[fullName.length - 1];
                fullName.unshift(cat);
                fullName.pop();
                cat = fullName.join(': ');
                if (moduleTests[cat] === undefined)
                    moduleTests[cat] = { tests: [], clear: true };
                moduleTests[cat].tests.push(new Test(cat, name, f.test, { isAggregated: false, timeout: (_c = (_b = f.options) === null || _b === void 0 ? void 0 : _b.timeout) !== null && _c !== void 0 ? _c : STANDART_TIMEOUT, skipReason: (_d = f.options) === null || _d === void 0 ? void 0 : _d.skipReason, owner: (_e = f.options) === null || _e === void 0 ? void 0 : _e.owner, benchmark: (_g = (_f = f.options) === null || _f === void 0 ? void 0 : _f.benchmark) !== null && _g !== void 0 ? _g : false }));
            }
        }
        const moduleAutoTests = [];
        const moduleDemo = [];
        const moduleDetectors = [];
        const packFunctions = yield datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.dapi.functions.filter(`package.id = "${packageId}"`).list();
        const reg = new RegExp(/skip:\s*([^,\s]+)|wait:\s*(\d+)|cat:\s*([^,\s]+)|timeout:\s*(\d+)/g);
        for (const f of packFunctions) {
            const tests = f.options['test'];
            const demo = f.options['demoPath'];
            if ((tests && Array.isArray(tests) && tests.length)) {
                for (let i = 0; i < tests.length; i++) {
                    const res = tests[i].matchAll(reg);
                    const map = {};
                    Array.from(res).forEach((arr) => {
                        if (arr[0].startsWith('skip'))
                            map['skip'] = arr[1];
                        else if (arr[0].startsWith('wait'))
                            map['wait'] = parseInt(arr[2]);
                        else if (arr[0].startsWith('cat'))
                            map['cat'] = arr[3];
                        else if (arr[0].startsWith('timeout'))
                            map['timeout'] = parseInt(arr[4]);
                    });
                    const test = new Test((_h = map.cat) !== null && _h !== void 0 ? _h : autoTestsCatName, tests.length === 1 ? f.name : `${f.name} ${i + 1}`, () => __awaiter(this, void 0, void 0, function* () {
                        const res = yield datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.functions.eval(addNamespace(tests[i], f));
                        if (map.wait)
                            yield delay(map.wait);
                        // eslint-disable-next-line no-throw-literal
                        if (typeof res === 'boolean' && !res)
                            throw `Failed: ${tests[i]}, expected true, got ${res}`;
                    }), { skipReason: map.skip, timeout: datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Test.isInBenchmark ? (_j = map.benchmarkTimeout) !== null && _j !== void 0 ? _j : BENCHMARK_TIMEOUT : (_k = map.timeout) !== null && _k !== void 0 ? _k : STANDART_TIMEOUT });
                    if (map.cat) {
                        const cat = map.cat;
                        if (moduleTests[cat] === undefined)
                            moduleTests[cat] = { tests: [], clear: true };
                        // only before/after can be defined in ts files tests under the category
                        if (!moduleTests[cat].tests)
                            moduleTests[cat].tests = [];
                        moduleTests[cat].tests.push(test);
                    }
                    else
                        moduleAutoTests.push(test);
                }
            }
            if (demo) {
                const wait = f.options['demoWait'] ? parseInt(f.options['demoWait']) : undefined;
                const test = new Test(demoCatName, f.friendlyName, () => __awaiter(this, void 0, void 0, function* () {
                    yield delay(300);
                    datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.shell.clearLastError();
                    yield f.apply();
                    yield delay(wait ? wait : 2000);
                    const unhandled = yield datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.shell.lastError;
                    if (unhandled)
                        throw new Error(unhandled);
                }), { skipReason: f.options['demoSkip'] });
                moduleDemo.push(test);
            }
            if (f.hasTag('semTypeDetector')) {
                let detectorsTestData = _dataframe_utils__WEBPACK_IMPORTED_MODULE_2__.testData;
                if (f.options['testData']) {
                    detectorsTestData = yield datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.data.files.openTable(`System:AppData/${package_.nqName}/${f.options['testData']}`);
                }
                const test = new Test(detectorsCatName, f.friendlyName, () => __awaiter(this, void 0, void 0, function* () {
                    const arr = [];
                    console.log(`System:AppData/${package_.nqName}/${f.options['testData']}`);
                    for (const col of detectorsTestData.clone().columns) {
                        const res = yield f.apply([col]);
                        arr.push(res || col.semType);
                    }
                    const resArr = arr.filter((i) => i);
                    expect(resArr.length, 1);
                    if (f.options['testDataColumnName'])
                        expect(resArr[0], f.options['testDataColumnName']);
                }), { skipReason: f.options['skipTest'] });
                moduleDetectors.push(test);
            }
        }
        wasRegistered[packageId] = true;
        if (moduleAutoTests.length > 0)
            moduleTests[autoTestsCatName] = { tests: moduleAutoTests, clear: true };
        if (moduleDemo.length > 0)
            moduleTests[demoCatName] = { tests: moduleDemo, clear: true };
        if (moduleDetectors.length > 0)
            moduleTests[detectorsCatName] = { tests: moduleDetectors, clear: false };
    });
}
function redefineConsole() {
    const logs = [];
    console.log = (...args) => {
        logs.push(...args);
        stdLog(...args);
    };
    console.info = (...args) => {
        logs.push(...args);
        stdInfo(...args);
    };
    console.warn = (...args) => {
        logs.push(...args);
        stdWarn(...args);
    };
    console.error = (...args) => {
        logs.push(...args);
        stdError(...args);
    };
    return logs;
}
function resetConsole() {
    console.log = stdLog;
    console.info = stdInfo;
    console.warn = stdWarn;
    console.error = stdError;
}
function runTests(options) {
    var _a, _b, _c, _d, _e;
    var _f;
    return __awaiter(this, void 0, void 0, function* () {
        console.log('--------------------');
        const package_ = (_b = (_a = datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.functions.getCurrentCall()) === null || _a === void 0 ? void 0 : _a.func) === null || _b === void 0 ? void 0 : _b.package;
        const packageOwner = ((_d = ((_c = package_ === null || package_ === void 0 ? void 0 : package_.packageOwner) !== null && _c !== void 0 ? _c : '').match(new RegExp('[^<]*<([^>]*)>'))) !== null && _d !== void 0 ? _d : ['', ''])[1];
        yield initAutoTests(package_);
        const results = [];
        console.log(`Running tests`);
        console.log(options);
        options !== null && options !== void 0 ? options : (options = {});
        (_e = (_f = options).testContext) !== null && _e !== void 0 ? _e : (_f.testContext = new TestContext());
        datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.shell.clearLastError();
        const logs = redefineConsole();
        yield invokeTests(tests, options);
        for (let r of results) {
            r.result = r.result.toString().replace(/"/g, '\'');
            if (r.logs != undefined)
                r.logs = r.logs.toString().replace(/"/g, '\'');
        }
        return results;
        function invokeCategoryMethod(method, category) {
            return __awaiter(this, void 0, void 0, function* () {
                let invokationResult = undefined;
                try {
                    if (method !== undefined) {
                        yield timeout(() => __awaiter(this, void 0, void 0, function* () {
                            yield method();
                        }), 100000, `before ${category}: timeout error`);
                    }
                }
                catch (x) {
                    invokationResult = yield getResult(x);
                }
                return invokationResult;
            });
        }
        function invokeTestsInCategory(category, options) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
            return __awaiter(this, void 0, void 0, function* () {
                let t = (_a = category.tests) !== null && _a !== void 0 ? _a : [];
                const res = [];
                // let memoryUsageBefore = (window?.performance as any)?.memory?.usedJSHeapSize;
                const widgetsBefore = getWidgetsCountSafe();
                if (category.clear) {
                    for (let i = 0; i < t.length; i++) {
                        if (t[i].options) {
                            if (((_b = t[i].options) === null || _b === void 0 ? void 0 : _b.benchmark) === undefined) {
                                if (!t[i].options)
                                    t[i].options = {};
                                t[i].options.benchmark = (_c = category.benchmarks) !== null && _c !== void 0 ? _c : false;
                            }
                        }
                        let test = t[i];
                        if (options.test)
                            if (options.test.toLowerCase() !== test.name.toLowerCase())
                                continue;
                        if (test === null || test === void 0 ? void 0 : test.options) {
                            test.options.owner = (_g = (_f = (_e = (_d = t[i].options) === null || _d === void 0 ? void 0 : _d.owner) !== null && _e !== void 0 ? _e : category === null || category === void 0 ? void 0 : category.owner) !== null && _f !== void 0 ? _f : packageOwner) !== null && _g !== void 0 ? _g : '';
                        }
                        // let isGBEnable = (window as any).gc && test.options?.skipReason == undefined;
                        // console.log(`********${isGBEnable}`);
                        // if (isGBEnable)
                        //   await (window as any).gc();
                        // memoryUsageBefore = (window?.performance as any)?.memory?.usedJSHeapSize;
                        let testRun = yield execTest(test, options === null || options === void 0 ? void 0 : options.test, logs, datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Test.isInBenchmark ? (_j = (_h = t[i].options) === null || _h === void 0 ? void 0 : _h.benchmarkTimeout) !== null && _j !== void 0 ? _j : BENCHMARK_TIMEOUT : (_l = (_k = t[i].options) === null || _k === void 0 ? void 0 : _k.timeout) !== null && _l !== void 0 ? _l : STANDART_TIMEOUT, package_.name, options.verbose);
                        // if (isGBEnable)
                        //   await (window as any).gc();
                        if (testRun)
                            res.push(Object.assign(Object.assign({}, testRun), { widgetsDifference: getWidgetsCountSafe() - widgetsBefore }));
                        // res.push({ ...testRun, memoryDelta: (window?.performance as any)?.memory?.usedJSHeapSize - memoryUsageBefore, widgetsDelta: getWidgetsCountSafe() - widgetsBefore });
                        datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.shell.closeAll();
                        datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Balloon.closeAll();
                    }
                }
                else {
                    for (let i = 0; i < t.length; i++) {
                        let test = t[i];
                        if (options.test)
                            if (options.test.toLowerCase() !== test.name.toLowerCase())
                                continue;
                        if (test === null || test === void 0 ? void 0 : test.options) {
                            test.options.owner = (_q = (_p = (_o = (_m = t[i].options) === null || _m === void 0 ? void 0 : _m.owner) !== null && _o !== void 0 ? _o : category === null || category === void 0 ? void 0 : category.owner) !== null && _p !== void 0 ? _p : packageOwner) !== null && _q !== void 0 ? _q : '';
                        }
                        // let isGBEnable = (window as any).gc && test.options?.skipReason == undefined;
                        // console.log(`********${isGBEnable}`);
                        // if (isGBEnable)
                        //   await (window as any).gc();
                        // memoryUsageBefore = (window?.performance as any)?.memory?.usedJSHeapSize;
                        let testRun = yield execTest(test, options === null || options === void 0 ? void 0 : options.test, logs, datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Test.isInBenchmark ? (_s = (_r = t[i].options) === null || _r === void 0 ? void 0 : _r.benchmarkTimeout) !== null && _s !== void 0 ? _s : BENCHMARK_TIMEOUT : (_t = t[i].options) === null || _t === void 0 ? void 0 : _t.timeout, package_.name, options.verbose);
                        // if (isGBEnable)
                        //   await (window as any).gc();
                        if (testRun)
                            res.push(Object.assign(Object.assign({}, testRun), { widgetsDifference: getWidgetsCountSafe() - widgetsBefore }));
                        // res.push({ ...testRun, memoryDelta: (window?.performance as any)?.memory?.usedJSHeapSize - memoryUsageBefore, widgetsDifference: getWidgetsCountSafe() - widgetsBefore });
                    }
                }
                return res;
            });
        }
        function getWidgetsCountSafe() {
            var _a;
            let length = -1;
            try {
                length = datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Widget.getAll().length;
            }
            catch (e) {
                console.warn((_a = e.message) !== null && _a !== void 0 ? _a : e);
            }
            return length;
        }
        function invokeTests(categoriesToInvoke, options) {
            var _a, _b, _c, _d, _e, _f, _g;
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    for (const [key, value] of Object.entries(categoriesToInvoke)) {
                        if ((!(options === null || options === void 0 ? void 0 : options.category) || ((_a = options.exclude) === null || _a === void 0 ? void 0 : _a.some((c) => key.startsWith(c)))))
                            continue;
                        if (!(key.toLowerCase().startsWith(`${options === null || options === void 0 ? void 0 : options.category.toLowerCase().trim()} :`) && !options.test) && key.toLowerCase().trim() !== (options === null || options === void 0 ? void 0 : options.category.toLowerCase().trim()))
                            continue;
                        stdLog(`Started ${key} category`);
                        //@ts-ignore
                        const skipped = (_b = value.tests) === null || _b === void 0 ? void 0 : _b.every((t) => { var _a; return (_a = t.options) === null || _a === void 0 ? void 0 : _a.skipReason; });
                        if (!skipped)
                            value.beforeStatus = yield invokeCategoryMethod(value.before, (_c = options.category) !== null && _c !== void 0 ? _c : '');
                        let t = (_d = value.tests) !== null && _d !== void 0 ? _d : [];
                        if (options.stressTest) {
                            t = t.filter((e) => { var _a; return (_a = e.options) === null || _a === void 0 ? void 0 : _a.stressTest; });
                            t = shuffle(t);
                        }
                        if (((_f = (_e = options.tags) === null || _e === void 0 ? void 0 : _e.length) !== null && _f !== void 0 ? _f : 0) > 0) {
                            t = t.filter((e) => { var _a, _b; return (_b = (_a = e.options) === null || _a === void 0 ? void 0 : _a.tags) === null || _b === void 0 ? void 0 : _b.some(tag => { var _a; return ((_a = options === null || options === void 0 ? void 0 : options.tags) !== null && _a !== void 0 ? _a : []).includes(tag); }); });
                        }
                        let res;
                        if (value.beforeStatus) {
                            res = Array.from(t.map((testElem) => {
                                return { date: new Date().toISOString(), category: key, name: testElem.name, success: false, result: 'before() failed', ms: 0, skipped: false, logs: '', owner: package_ === null || package_ === void 0 ? void 0 : package_.packageOwner, package: package_.name, widgetsDifference: 0, flaking: datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Test.isReproducing };
                            }));
                            res.forEach((test) => __awaiter(this, void 0, void 0, function* () { return reportTest('package', test); }));
                        }
                        else
                            res = yield invokeTestsInCategory(value, options);
                        const data = res.filter((d) => d.result != 'skipped');
                        if (!skipped)
                            value.afterStatus = yield invokeCategoryMethod(value.after, (_g = options.category) !== null && _g !== void 0 ? _g : '');
                        // Clear after category
                        // grok.shell.closeAll();
                        // DG.Balloon.closeAll();
                        if (value.afterStatus)
                            data.push({ date: new Date().toISOString(), category: key, name: 'after', success: false, result: value.afterStatus, ms: 0, skipped: false, logs: '', owner: package_ === null || package_ === void 0 ? void 0 : package_.packageOwner, package: package_.name, widgetsDifference: 0, flaking: datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Test.isReproducing });
                        if (value.beforeStatus)
                            data.push({ date: new Date().toISOString(), category: key, name: 'before', success: false, result: value.beforeStatus, ms: 0, skipped: false, logs: '', owner: package_ === null || package_ === void 0 ? void 0 : package_.packageOwner, package: package_.name, widgetsDifference: 0, flaking: datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Test.isReproducing });
                        results.push(...data);
                    }
                }
                finally {
                    resetConsole();
                }
                if (options.testContext.catchUnhandled && (!datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Test.isInBenchmark)) {
                    yield delay(1000);
                    const error = yield datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.shell.lastError;
                    const params = {
                        logs: '',
                        date: new Date().toISOString(),
                        category: 'Unhandled exceptions',
                        name: 'Exception',
                        result: error !== null && error !== void 0 ? error : '',
                        success: !error,
                        ms: 0,
                        skipped: false,
                        owner: packageOwner !== null && packageOwner !== void 0 ? packageOwner : '',
                        'package': package_.name,
                        widgetsDifference: 0
                    };
                    results.push(Object.assign(Object.assign({}, params), { 'flaking': datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Test.isReproducing && !error }));
                    params.package = package_.name;
                    yield reportTest('package', params);
                }
            });
        }
    });
}
function reportTest(type, params) {
    return __awaiter(this, void 0, void 0, function* () {
        if (datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.shell.reportTest != null)
            yield datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.shell.reportTest(type, params);
        else {
            yield fetch(`${datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.dapi.root}/log/tests/${type}`, {
                method: 'POST', headers: { 'Content-Type': 'application/json' },
                credentials: 'same-origin',
                body: JSON.stringify(params)
            });
        }
    });
}
function getResult(x) {
    return __awaiter(this, void 0, void 0, function* () {
        return `${x.toString()}\n${x.stack ? (yield datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Logger.translateStackTrace(x.stack)) : ''}`;
    });
}
function execTest(t, predicate, logs, testTimeout, packageName, verbose) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    return __awaiter(this, void 0, void 0, function* () {
        logs.length = 0;
        let r;
        let type = 'package';
        const filter = predicate != undefined && (t.name.toLowerCase() !== predicate.toLowerCase());
        let skip = ((_a = t.options) === null || _a === void 0 ? void 0 : _a.skipReason) || filter;
        let skipReason = filter ? 'skipped' : (_b = t.options) === null || _b === void 0 ? void 0 : _b.skipReason;
        console.log(test.name, skip);
        if (datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Test.isInBenchmark && !((_c = t.options) === null || _c === void 0 ? void 0 : _c.benchmark)) {
            stdLog(`SKIPPED: ${t.category} ${t.name} doesnt available in benchmark mode`);
            return undefined;
        }
        if (!skip)
            stdLog(`Started ${t.category} ${t.name}`);
        const start = Date.now();
        const startDate = new Date(start).toISOString();
        try {
            if (skip)
                r = { name: t.name, owner: (_e = (_d = t.options) === null || _d === void 0 ? void 0 : _d.owner) !== null && _e !== void 0 ? _e : '', category: t.category, logs: '', date: startDate, success: true, result: skipReason, ms: 0, skipped: true, package: packageName !== null && packageName !== void 0 ? packageName : '', flaking: datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Test.isReproducing };
            else {
                let timeout_ = testTimeout !== null && testTimeout !== void 0 ? testTimeout : STANDART_TIMEOUT;
                if (datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Test.isProfiling)
                    console.profile(`${t.category}: ${t.name}`);
                r = { name: t.name, owner: (_g = (_f = t.options) === null || _f === void 0 ? void 0 : _f.owner) !== null && _g !== void 0 ? _g : '', category: t.category, logs: '', date: startDate, success: true, result: (_h = (yield timeout(t.test, timeout_)).toString()) !== null && _h !== void 0 ? _h : 'OK', ms: 0, skipped: false, package: packageName !== null && packageName !== void 0 ? packageName : '', flaking: datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Test.isReproducing };
                if (datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Test.isProfiling) {
                    console.profileEnd(`${t.category}: ${t.name}`);
                    datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.shell.info(`Profiling of ${t.category}: ${t.name} finished \n Please ensure that you have opened DevTools (F12) / Performance panel before test starts.`);
                }
            }
        }
        catch (x) {
            stdError(x);
            r = { name: t.name, owner: (_k = (_j = t.options) === null || _j === void 0 ? void 0 : _j.owner) !== null && _k !== void 0 ? _k : '', category: t.category, logs: '', date: startDate, success: false, result: yield getResult(x), ms: 0, skipped: false, package: packageName !== null && packageName !== void 0 ? packageName : '', flaking: false };
        }
        if (((_l = t.options) === null || _l === void 0 ? void 0 : _l.isAggregated) && r.result.constructor === datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.DataFrame) {
            const col = r.result.col('success');
            if (col)
                r.success = col.stats.sum === col.length;
            if (!verbose) {
                const df = r.result;
                df.columns.remove('stack');
                df.rows.removeWhere((r) => r.get('success'));
                r.result = df;
            }
            r.result = r.result.toCsv();
        }
        r.logs = logs.join('\n');
        r.ms = Date.now() - start;
        if (!skip)
            stdLog(`Finished ${t.category} ${t.name} for ${r.ms} ms`);
        r.category = t.category;
        r.name = t.name;
        r.owner = (_o = (_m = t.options) === null || _m === void 0 ? void 0 : _m.owner) !== null && _o !== void 0 ? _o : '';
        if (!filter) {
            let params = {
                'success': r.success, 'result': r.result, 'ms': r.ms, 'date': r.date,
                'skipped': r.skipped, 'category': t.category, 'name': t.name, 'logs': r.logs, 'owner': r.owner,
                'flaking': datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Test.isReproducing && r.success,
                'package': r.package
            };
            if (r.result.constructor == Object) {
                const res = Object.keys(r.result).reduce((acc, k) => (Object.assign(Object.assign({}, acc), { ['result.' + k]: r.result[k] })), {});
                params = Object.assign(Object.assign({}, params), res);
            }
            if (params.result instanceof datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.DataFrame)
                params.result = JSON.stringify((_p = params.result) === null || _p === void 0 ? void 0 : _p.toJson()) || '';
            yield reportTest(type, params);
        }
        return r;
    });
}
function shuffle(array) {
    const newArr = array.slice();
    newArr.sort(() => Math.random() - 0.5);
    return newArr;
}
/* Waits [ms] milliseconds */
function delay(ms) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new Promise((r) => setTimeout(r, ms));
    });
}
function awaitCheck(checkHandler, error = 'Timeout exceeded', wait = 500, interval = 50) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                clearInterval(intervalId);
                reject(new Error(error));
            }, wait);
            // @ts-ignore
            const intervalId = setInterval(() => {
                if (checkHandler()) {
                    clearInterval(intervalId);
                    resolve(null);
                }
            }, interval);
        });
    });
}
// Returns test execution result or an error in case of timeout
function timeout(func, testTimeout, timeoutReason = 'EXECUTION TIMEOUT') {
    return __awaiter(this, void 0, void 0, function* () {
        let timeout = null;
        const timeoutPromise = new Promise((_, reject) => {
            timeout = setTimeout(() => {
                // eslint-disable-next-line prefer-promise-reject-errors
                reject(timeoutReason);
            }, testTimeout);
        });
        try {
            return yield Promise.race([func(), timeoutPromise]);
        }
        finally {
            if (timeout)
                clearTimeout(timeout);
        }
    });
}
function isDialogPresent(dialogTitle) {
    const dialogs = datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Dialog.getOpenDialogs();
    for (let i = 0; i < dialogs.length; i++) {
        if (dialogs[i].title == dialogTitle)
            return true;
    }
    return false;
}
/** Expects an asynchronous {@link action} to throw an exception. Use {@link check} to perform
 * deeper inspection of the exception if necessary.
 * @param  {function(): Promise<void>} action
 * @param  {function(any): boolean} check
 * @return {Promise<void>}
 */
function expectExceptionAsync(action, check) {
    return __awaiter(this, void 0, void 0, function* () {
        let caught = false;
        let checked = false;
        try {
            yield action();
        }
        catch (e) {
            caught = true;
            checked = !check || check(e);
        }
        finally {
            if (!caught)
                throw new Error('An exception is expected but not thrown');
            if (!checked)
                throw new Error('An expected exception is thrown, but it does not satisfy the condition');
        }
    });
}
const catDF = datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.DataFrame.fromColumns([datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Column.fromStrings('col', ['val1', 'val2', 'val3'])]);
/**
 * Universal test for viewers. It search viewers in DOM by tags: canvas, svg, img, input, h1, a
 * @param  {string} v Viewer name
 * @param  {DG.DataFrame} df Dataframe to use. Should have at least 3 rows
 * @param  {boolean} options.detectSemanticTypes Specify whether to detect semantic types or not
 * @param  {boolean} options.readOnly If set to true, the dataframe will not be modified during the test
 * @param  {boolean} options.arbitraryDfTest If set to false, test on arbitrary dataframe
 * (one categorical column) will not be performed
 * @param  {object} options List of options (optional)
 * @return {Promise<void>} The test is considered successful if it completes without errors
 */
function testViewer(v, df, options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const packageName = (_a = options === null || options === void 0 ? void 0 : options.packageName) !== null && _a !== void 0 ? _a : '';
        if (options === null || options === void 0 ? void 0 : options.detectSemanticTypes)
            yield datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.data.detectSemanticTypes(df);
        const tv = datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.shell.addTableView(df);
        try {
            //1. Open, do nothing and close
            yield (0,_test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.testViewerInternal)(tv, v, packageName, datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.events.onViewerAdded);
            //in case viewer with async rendering - wait for render to complete
            if (options === null || options === void 0 ? void 0 : options.awaitViewer)
                yield (0,_test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.testViewerInternal)(tv, v, packageName, datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.events.onViewerAdded, undefined, options.awaitViewer);
            //2. Open viewer, run selection, filter, etc. and close
            if (!(options === null || options === void 0 ? void 0 : options.readOnly)) {
                yield (0,_test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.testViewerInternal)(tv, v, packageName, datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.events.onViewerAdded, _test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.selectFilterChangeCurrent);
                if (options === null || options === void 0 ? void 0 : options.awaitViewer)
                    yield (0,_test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.testViewerInternal)(tv, v, packageName, datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.events.onViewerAdded, _test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.selectFilterChangeCurrent, options.awaitViewer);
            }
            //2. Open viewer, change options, save layout and close
            let propsAndLayout = null;
            propsAndLayout = yield (0,_test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.testViewerInternal)(tv, v, packageName, datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.events.onViewerAdded, _test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.changeOptionsSaveLayout);
            if (options === null || options === void 0 ? void 0 : options.awaitViewer)
                propsAndLayout = yield (0,_test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.testViewerInternal)(tv, v, packageName, datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.events.onViewerAdded, _test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.changeOptionsSaveLayout, options.awaitViewer);
            //3. Load layout
            yield (0,_test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.testViewerInternal)(tv, v, packageName, datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.events.onViewLayoutApplied, _test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.loadLayout, undefined, propsAndLayout === null || propsAndLayout === void 0 ? void 0 : propsAndLayout.layout, { savedProps: propsAndLayout === null || propsAndLayout === void 0 ? void 0 : propsAndLayout.savedProps });
            if (options === null || options === void 0 ? void 0 : options.awaitViewer)
                yield (0,_test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.testViewerInternal)(tv, v, packageName, datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.events.onViewLayoutApplied, _test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.loadLayout, options.awaitViewer, propsAndLayout === null || propsAndLayout === void 0 ? void 0 : propsAndLayout.layout, { savedProps: propsAndLayout === null || propsAndLayout === void 0 ? void 0 : propsAndLayout.savedProps });
            //4. Open viewer on arbitary dataset
            if ((options === null || options === void 0 ? void 0 : options.arbitraryDfTest) !== false) {
                tv.dataFrame = catDF;
                yield delay(50);
                yield (0,_test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.testViewerInternal)(tv, v, packageName, datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.events.onViewerAdded);
                if (options === null || options === void 0 ? void 0 : options.awaitViewer)
                    yield (0,_test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.testViewerInternal)(tv, v, packageName, datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.events.onViewerAdded, undefined, options.awaitViewer);
            }
            //5. Call postponed filtering
            yield (0,_test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.testViewerInternal)(tv, v, packageName, datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.events.onViewerAdded, _test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.filterAsync);
            if (options === null || options === void 0 ? void 0 : options.awaitViewer)
                yield (0,_test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.testViewerInternal)(tv, v, packageName, datagrok_api_grok__WEBPACK_IMPORTED_MODULE_0__.events.onViewerAdded, _test_viewer_utils__WEBPACK_IMPORTED_MODULE_3__.filterAsync, options.awaitViewer);
        }
        finally {
            // closeAll() is handling by common test workflow
            // grok.shell.closeAll();
            // DG.Balloon.closeAll();
        }
    });
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./node_modules/fast-sha256/sha256.js":
/*!********************************************!*\
  !*** ./node_modules/fast-sha256/sha256.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
    // Hack to make all exports of this module sha256 function object properties.
    var exports = {};
    factory(exports);
    var sha256 = exports["default"];
    for (var k in exports) {
        sha256[k] = exports[k];
    }
        
    if ( true && typeof module.exports === 'object') {
        module.exports = sha256;
    } else if (true) {
        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return sha256; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); 
    } else // removed by dead control flow
{}
})(this, function(exports) {
"use strict";
exports.__esModule = true;
// SHA-256 (+ HMAC and PBKDF2) for JavaScript.
//
// Written in 2014-2016 by Dmitry Chestnykh.
// Public domain, no warranty.
//
// Functions (accept and return Uint8Arrays):
//
//   sha256(message) -> hash
//   sha256.hmac(key, message) -> mac
//   sha256.pbkdf2(password, salt, rounds, dkLen) -> dk
//
//  Classes:
//
//   new sha256.Hash()
//   new sha256.HMAC(key)
//
exports.digestLength = 32;
exports.blockSize = 64;
// SHA-256 constants
var K = new Uint32Array([
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
    0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
    0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
    0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
    0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
    0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
    0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
]);
function hashBlocks(w, v, p, pos, len) {
    var a, b, c, d, e, f, g, h, u, i, j, t1, t2;
    while (len >= 64) {
        a = v[0];
        b = v[1];
        c = v[2];
        d = v[3];
        e = v[4];
        f = v[5];
        g = v[6];
        h = v[7];
        for (i = 0; i < 16; i++) {
            j = pos + i * 4;
            w[i] = (((p[j] & 0xff) << 24) | ((p[j + 1] & 0xff) << 16) |
                ((p[j + 2] & 0xff) << 8) | (p[j + 3] & 0xff));
        }
        for (i = 16; i < 64; i++) {
            u = w[i - 2];
            t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10);
            u = w[i - 15];
            t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3);
            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);
        }
        for (i = 0; i < 64; i++) {
            t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^
                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +
                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;
            t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^
                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;
            h = g;
            g = f;
            f = e;
            e = (d + t1) | 0;
            d = c;
            c = b;
            b = a;
            a = (t1 + t2) | 0;
        }
        v[0] += a;
        v[1] += b;
        v[2] += c;
        v[3] += d;
        v[4] += e;
        v[5] += f;
        v[6] += g;
        v[7] += h;
        pos += 64;
        len -= 64;
    }
    return pos;
}
// Hash implements SHA256 hash algorithm.
var Hash = /** @class */ (function () {
    function Hash() {
        this.digestLength = exports.digestLength;
        this.blockSize = exports.blockSize;
        // Note: Int32Array is used instead of Uint32Array for performance reasons.
        this.state = new Int32Array(8); // hash state
        this.temp = new Int32Array(64); // temporary state
        this.buffer = new Uint8Array(128); // buffer for data to hash
        this.bufferLength = 0; // number of bytes in buffer
        this.bytesHashed = 0; // number of total bytes hashed
        this.finished = false; // indicates whether the hash was finalized
        this.reset();
    }
    // Resets hash state making it possible
    // to re-use this instance to hash other data.
    Hash.prototype.reset = function () {
        this.state[0] = 0x6a09e667;
        this.state[1] = 0xbb67ae85;
        this.state[2] = 0x3c6ef372;
        this.state[3] = 0xa54ff53a;
        this.state[4] = 0x510e527f;
        this.state[5] = 0x9b05688c;
        this.state[6] = 0x1f83d9ab;
        this.state[7] = 0x5be0cd19;
        this.bufferLength = 0;
        this.bytesHashed = 0;
        this.finished = false;
        return this;
    };
    // Cleans internal buffers and re-initializes hash state.
    Hash.prototype.clean = function () {
        for (var i = 0; i < this.buffer.length; i++) {
            this.buffer[i] = 0;
        }
        for (var i = 0; i < this.temp.length; i++) {
            this.temp[i] = 0;
        }
        this.reset();
    };
    // Updates hash state with the given data.
    //
    // Optionally, length of the data can be specified to hash
    // fewer bytes than data.length.
    //
    // Throws error when trying to update already finalized hash:
    // instance must be reset to use it again.
    Hash.prototype.update = function (data, dataLength) {
        if (dataLength === void 0) { dataLength = data.length; }
        if (this.finished) {
            throw new Error("SHA256: can't update because hash was finished.");
        }
        var dataPos = 0;
        this.bytesHashed += dataLength;
        if (this.bufferLength > 0) {
            while (this.bufferLength < 64 && dataLength > 0) {
                this.buffer[this.bufferLength++] = data[dataPos++];
                dataLength--;
            }
            if (this.bufferLength === 64) {
                hashBlocks(this.temp, this.state, this.buffer, 0, 64);
                this.bufferLength = 0;
            }
        }
        if (dataLength >= 64) {
            dataPos = hashBlocks(this.temp, this.state, data, dataPos, dataLength);
            dataLength %= 64;
        }
        while (dataLength > 0) {
            this.buffer[this.bufferLength++] = data[dataPos++];
            dataLength--;
        }
        return this;
    };
    // Finalizes hash state and puts hash into out.
    //
    // If hash was already finalized, puts the same value.
    Hash.prototype.finish = function (out) {
        if (!this.finished) {
            var bytesHashed = this.bytesHashed;
            var left = this.bufferLength;
            var bitLenHi = (bytesHashed / 0x20000000) | 0;
            var bitLenLo = bytesHashed << 3;
            var padLength = (bytesHashed % 64 < 56) ? 64 : 128;
            this.buffer[left] = 0x80;
            for (var i = left + 1; i < padLength - 8; i++) {
                this.buffer[i] = 0;
            }
            this.buffer[padLength - 8] = (bitLenHi >>> 24) & 0xff;
            this.buffer[padLength - 7] = (bitLenHi >>> 16) & 0xff;
            this.buffer[padLength - 6] = (bitLenHi >>> 8) & 0xff;
            this.buffer[padLength - 5] = (bitLenHi >>> 0) & 0xff;
            this.buffer[padLength - 4] = (bitLenLo >>> 24) & 0xff;
            this.buffer[padLength - 3] = (bitLenLo >>> 16) & 0xff;
            this.buffer[padLength - 2] = (bitLenLo >>> 8) & 0xff;
            this.buffer[padLength - 1] = (bitLenLo >>> 0) & 0xff;
            hashBlocks(this.temp, this.state, this.buffer, 0, padLength);
            this.finished = true;
        }
        for (var i = 0; i < 8; i++) {
            out[i * 4 + 0] = (this.state[i] >>> 24) & 0xff;
            out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;
            out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;
            out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;
        }
        return this;
    };
    // Returns the final hash digest.
    Hash.prototype.digest = function () {
        var out = new Uint8Array(this.digestLength);
        this.finish(out);
        return out;
    };
    // Internal function for use in HMAC for optimization.
    Hash.prototype._saveState = function (out) {
        for (var i = 0; i < this.state.length; i++) {
            out[i] = this.state[i];
        }
    };
    // Internal function for use in HMAC for optimization.
    Hash.prototype._restoreState = function (from, bytesHashed) {
        for (var i = 0; i < this.state.length; i++) {
            this.state[i] = from[i];
        }
        this.bytesHashed = bytesHashed;
        this.finished = false;
        this.bufferLength = 0;
    };
    return Hash;
}());
exports.Hash = Hash;
// HMAC implements HMAC-SHA256 message authentication algorithm.
var HMAC = /** @class */ (function () {
    function HMAC(key) {
        this.inner = new Hash();
        this.outer = new Hash();
        this.blockSize = this.inner.blockSize;
        this.digestLength = this.inner.digestLength;
        var pad = new Uint8Array(this.blockSize);
        if (key.length > this.blockSize) {
            (new Hash()).update(key).finish(pad).clean();
        }
        else {
            for (var i = 0; i < key.length; i++) {
                pad[i] = key[i];
            }
        }
        for (var i = 0; i < pad.length; i++) {
            pad[i] ^= 0x36;
        }
        this.inner.update(pad);
        for (var i = 0; i < pad.length; i++) {
            pad[i] ^= 0x36 ^ 0x5c;
        }
        this.outer.update(pad);
        this.istate = new Uint32Array(8);
        this.ostate = new Uint32Array(8);
        this.inner._saveState(this.istate);
        this.outer._saveState(this.ostate);
        for (var i = 0; i < pad.length; i++) {
            pad[i] = 0;
        }
    }
    // Returns HMAC state to the state initialized with key
    // to make it possible to run HMAC over the other data with the same
    // key without creating a new instance.
    HMAC.prototype.reset = function () {
        this.inner._restoreState(this.istate, this.inner.blockSize);
        this.outer._restoreState(this.ostate, this.outer.blockSize);
        return this;
    };
    // Cleans HMAC state.
    HMAC.prototype.clean = function () {
        for (var i = 0; i < this.istate.length; i++) {
            this.ostate[i] = this.istate[i] = 0;
        }
        this.inner.clean();
        this.outer.clean();
    };
    // Updates state with provided data.
    HMAC.prototype.update = function (data) {
        this.inner.update(data);
        return this;
    };
    // Finalizes HMAC and puts the result in out.
    HMAC.prototype.finish = function (out) {
        if (this.outer.finished) {
            this.outer.finish(out);
        }
        else {
            this.inner.finish(out);
            this.outer.update(out, this.digestLength).finish(out);
        }
        return this;
    };
    // Returns message authentication code.
    HMAC.prototype.digest = function () {
        var out = new Uint8Array(this.digestLength);
        this.finish(out);
        return out;
    };
    return HMAC;
}());
exports.HMAC = HMAC;
// Returns SHA256 hash of data.
function hash(data) {
    var h = (new Hash()).update(data);
    var digest = h.digest();
    h.clean();
    return digest;
}
exports.hash = hash;
// Function hash is both available as module.hash and as default export.
exports["default"] = hash;
// Returns HMAC-SHA256 of data under the key.
function hmac(key, data) {
    var h = (new HMAC(key)).update(data);
    var digest = h.digest();
    h.clean();
    return digest;
}
exports.hmac = hmac;
// Fills hkdf buffer like this:
// T(1) = HMAC-Hash(PRK, T(0) | info | 0x01)
function fillBuffer(buffer, hmac, info, counter) {
    // Counter is a byte value: check if it overflowed.
    var num = counter[0];
    if (num === 0) {
        throw new Error("hkdf: cannot expand more");
    }
    // Prepare HMAC instance for new data with old key.
    hmac.reset();
    // Hash in previous output if it was generated
    // (i.e. counter is greater than 1).
    if (num > 1) {
        hmac.update(buffer);
    }
    // Hash in info if it exists.
    if (info) {
        hmac.update(info);
    }
    // Hash in the counter.
    hmac.update(counter);
    // Output result to buffer and clean HMAC instance.
    hmac.finish(buffer);
    // Increment counter inside typed array, this works properly.
    counter[0]++;
}
var hkdfSalt = new Uint8Array(exports.digestLength); // Filled with zeroes.
function hkdf(key, salt, info, length) {
    if (salt === void 0) { salt = hkdfSalt; }
    if (length === void 0) { length = 32; }
    var counter = new Uint8Array([1]);
    // HKDF-Extract uses salt as HMAC key, and key as data.
    var okm = hmac(salt, key);
    // Initialize HMAC for expanding with extracted key.
    // Ensure no collisions with `hmac` function.
    var hmac_ = new HMAC(okm);
    // Allocate buffer.
    var buffer = new Uint8Array(hmac_.digestLength);
    var bufpos = buffer.length;
    var out = new Uint8Array(length);
    for (var i = 0; i < length; i++) {
        if (bufpos === buffer.length) {
            fillBuffer(buffer, hmac_, info, counter);
            bufpos = 0;
        }
        out[i] = buffer[bufpos++];
    }
    hmac_.clean();
    buffer.fill(0);
    counter.fill(0);
    return out;
}
exports.hkdf = hkdf;
// Derives a key from password and salt using PBKDF2-HMAC-SHA256
// with the given number of iterations.
//
// The number of bytes returned is equal to dkLen.
//
// (For better security, avoid dkLen greater than hash length - 32 bytes).
function pbkdf2(password, salt, iterations, dkLen) {
    var prf = new HMAC(password);
    var len = prf.digestLength;
    var ctr = new Uint8Array(4);
    var t = new Uint8Array(len);
    var u = new Uint8Array(len);
    var dk = new Uint8Array(dkLen);
    for (var i = 0; i * len < dkLen; i++) {
        var c = i + 1;
        ctr[0] = (c >>> 24) & 0xff;
        ctr[1] = (c >>> 16) & 0xff;
        ctr[2] = (c >>> 8) & 0xff;
        ctr[3] = (c >>> 0) & 0xff;
        prf.reset();
        prf.update(salt);
        prf.update(ctr);
        prf.finish(u);
        for (var j = 0; j < len; j++) {
            t[j] = u[j];
        }
        for (var j = 2; j <= iterations; j++) {
            prf.reset();
            prf.update(u).finish(u);
            for (var k = 0; k < len; k++) {
                t[k] ^= u[k];
            }
        }
        for (var j = 0; j < len && i * len + j < dkLen; j++) {
            dk[i * len + j] = t[j];
        }
    }
    for (var i = 0; i < len; i++) {
        t[i] = u[i] = 0;
    }
    for (var i = 0; i < 4; i++) {
        ctr[i] = 0;
    }
    prf.clean();
    return dk;
}
exports.pbkdf2 = pbkdf2;
});


/***/ }),

/***/ "datagrok-api/dg":
/*!*********************!*\
  !*** external "DG" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = DG;

/***/ }),

/***/ "datagrok-api/grok":
/*!***********************!*\
  !*** external "grok" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = grok;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";
/*!*****************************!*\
  !*** ./src/package-test.ts ***!
  \*****************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _package: () => (/* binding */ _package),
/* harmony export */   initAutoTests: () => (/* binding */ initAutoTests),
/* harmony export */   test: () => (/* binding */ test),
/* harmony export */   tests: () => (/* reexport safe */ _datagrok_libraries_utils_src_test__WEBPACK_IMPORTED_MODULE_0__.tests)
/* harmony export */ });
/* harmony import */ var _datagrok_libraries_utils_src_test__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @datagrok-libraries/utils/src/test */ "./node_modules/@datagrok-libraries/utils/src/test.js");
/* harmony import */ var datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! datagrok-api/dg */ "datagrok-api/dg");
/* harmony import */ var datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__);


let _package = new datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.Package();

//name: test
//input: string category {optional: true}
//input: string test {optional: true}
//input: object testContext {optional: true}
//output: dataframe result
async function test(category, test, testContext) {
    const data = await (0,_datagrok_libraries_utils_src_test__WEBPACK_IMPORTED_MODULE_0__.runTests)({ category, test, testContext });
    return datagrok_api_dg__WEBPACK_IMPORTED_MODULE_1__.DataFrame.fromObjects(data);
}
//name: initAutoTests
async function initAutoTests() {
    await (0,_datagrok_libraries_utils_src_test__WEBPACK_IMPORTED_MODULE_0__.initAutoTests)(_package, _package.getModule('package-test.js'));
}

})();

biologics_test = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=package-test.js.map