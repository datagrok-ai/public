/**
This file is auto-generated by the grok api command.
If you notice any changes, please push them to the repository.
Do not edit this file manually.
*/
import * as grok from 'datagrok-api/grok';
import * as DG from 'datagrok-api/dg';


export namespace scripts {
  export async function fabArmExchange(meaConcentration: number , phOfFaeReaction: number , faeReactionTime: number , ionicStrenght: number , targetIgGConc: number , massOverload: number , P1MW: number , reactionVolume: number , partialPressureOfOxygen: number , doInitial: number , doBuffer: number , oxygenTransferRate: number , pressure: number , temperature: number , Lid: boolean , headSpace: number , dfVolume: number , filterateRateDF: number , phOfUfdfBuffer: number , phOfSecondUfdfBuffer: number , secondDfVolume: number , dfConcentration: number , filterateRateUf: number , holdTime: number , phDuringHoldTime: number , holdTime2: number , phDuringSecondHoldTime: number ): Promise<{c: number, d: number}> {
    return await grok.functions.call('Compute:FabArmExchange', { meaConcentration, phOfFaeReaction, faeReactionTime, ionicStrenght, targetIgGConc, massOverload, P1MW, reactionVolume, partialPressureOfOxygen, doInitial, doBuffer, oxygenTransferRate, pressure, temperature, Lid, headSpace, dfVolume, filterateRateDF, phOfUfdfBuffer, phOfSecondUfdfBuffer, secondDfVolume, dfConcentration, filterateRateUf, holdTime, phDuringHoldTime, holdTime2, phDuringSecondHoldTime });
  }

  /**
  Identify the beats in an ECG signal and compute the IBIs
  */
  export async function intervalsFromECG(samplingFrequency: number , bpmMax: number , delta: number , k: number ): Promise<any> {
    return await grok.functions.call('Compute:IntervalsFromECG', { samplingFrequency, bpmMax, delta, k });
  }

  /**
  Predict the minimum filter size required for the separation of effluent from bioreactors, given the constraints of batch size and total batch time based on a training dataset of time vs filtrate volume for a given filter type, filter area and pressure
  */
  export async function vmax(test_data: DG.DataFrame , test_area: number , vbatch: number , tbatch: number , sf: number ): Promise<{processedData: DG.DataFrame, vmax: number, q0: number, slope_est: number, slope_err: number, icept_est: number, icept_err: number, rsq: number, f_stat: number, df: number, sigma: number, resid_ss: number, expl_ss: number, ss_tot: number, amin: number}> {
    return await grok.functions.call('Compute:Vmax', { test_data, test_area, vbatch, tbatch, sf });
  }
}

export namespace funcs {
  export async function openModelFromFuncall(funccall: any ): Promise<void> {
    return await grok.functions.call('Compute:OpenModelFromFuncall', { funccall });
  }

  /**
  Creates an outliers selection viewer
  */
  export async function outliersSelection(): Promise<any> {
    return await grok.functions.call('Compute:OutliersSelection', {});
  }

  export async function richFunctionViewEditor(call: any ): Promise<DG.View> {
    return await grok.functions.call('Compute:RichFunctionViewEditor', { call });
  }

  export async function pipelineStepEditor(call: any ): Promise<DG.View> {
    return await grok.functions.call('Compute:PipelineStepEditor', { call });
  }

  export async function renderPanel(func: any ): Promise<any> {
    return await grok.functions.call('Compute:RenderPanel', { func });
  }

  export async function init(): Promise<void> {
    return await grok.functions.call('Compute:Init', {});
  }

  export async function modelCatalog(): Promise<DG.View> {
    return await grok.functions.call('Compute:ModelCatalog', {});
  }

  export async function modelCatalogTreeBrowser(treeNode: any ): Promise<void> {
    return await grok.functions.call('Compute:ModelCatalogTreeBrowser', { treeNode });
  }

  export async function customDataUploader(func: any ): Promise<any> {
    return await grok.functions.call('Compute:CustomDataUploader', { func });
  }

  export async function customUploader(params: any ): Promise<{uploadWidget: any, uploadFuncCall: any}> {
    return await grok.functions.call('Compute:CustomUploader', { params });
  }

  export async function customCustomizer(params: any ): Promise<void> {
    return await grok.functions.call('Compute:CustomCustomizer', { params });
  }

  export async function simTimeValidator(params: any ): Promise<any> {
    return await grok.functions.call('Compute:SimTimeValidator', { params });
  }

  export async function desiredTempValidator(params: any ): Promise<any> {
    return await grok.functions.call('Compute:DesiredTempValidator', { params });
  }

  export async function initialTempValidator(params: any ): Promise<any> {
    return await grok.functions.call('Compute:InitialTempValidator', { params });
  }

  export async function ambTempValidator(params: any ): Promise<any> {
    return await grok.functions.call('Compute:AmbTempValidator', { params });
  }

  export async function heatCapValidator(params: any ): Promise<any> {
    return await grok.functions.call('Compute:HeatCapValidator', { params });
  }

  export async function customStringInput(params: any ): Promise<any> {
    return await grok.functions.call('Compute:CustomStringInput', { params });
  }

  export async function objectCoolingSelector(params: any ): Promise<any> {
    return await grok.functions.call('Compute:ObjectCoolingSelector', { params });
  }

  /**
  Test for optimization: multiple scalars output
  */
  export async function fitTestFunc(x1: number , x2: number , y: DG.DataFrame , bool: boolean ): Promise<{integer: number, float1: number, float2: number, table1: DG.DataFrame, table2: DG.DataFrame}> {
    return await grok.functions.call('Compute:FitTestFunc', { x1, x2, y, bool });
  }

  /**
  Test for optimization: multiple scalars output
  */
  export async function testFittingOutputs(): Promise<void> {
    return await grok.functions.call('Compute:TestFittingOutputs', {});
  }
}
