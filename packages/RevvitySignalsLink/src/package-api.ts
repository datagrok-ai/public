/**
This file is auto-generated by the grok api command.
If you notice any changes, please push them to the repository.
Do not edit this file manually.
*/
import * as grok from 'datagrok-api/grok';
import * as DG from 'datagrok-api/dg';


export namespace funcs {
  export async function revvitySignalsLinkApp(path?: string ): Promise<DG.View> {
    return await grok.functions.call('RevvitySignalsLink:RevvitySignalsLinkApp', { path });
  }

  export async function revvitySignalsLinkAppTreeBrowser(treeNode: any , browseView: DG.View ): Promise<void> {
    return await grok.functions.call('RevvitySignalsLink:RevvitySignalsLinkAppTreeBrowser', { treeNode, browseView });
  }

  export async function searchEntities(query: string , params: string ): Promise<DG.DataFrame> {
    return await grok.functions.call('RevvitySignalsLink:SearchEntities', { query, params });
  }

  export async function searchEntitiesWithStructures(query: string , params: string ): Promise<DG.DataFrame> {
    return await grok.functions.call('RevvitySignalsLink:SearchEntitiesWithStructures', { query, params });
  }

  export async function getUsers(): Promise<string> {
    return await grok.functions.call('RevvitySignalsLink:GetUsers', {});
  }

  export async function getLibraries(): Promise<string> {
    return await grok.functions.call('RevvitySignalsLink:GetLibraries', {});
  }

  export async function getTags(type: string , assetTypeId: string ): Promise<string> {
    return await grok.functions.call('RevvitySignalsLink:GetTags', { type, assetTypeId });
  }

  export async function getTerms(fieldName: string , type: string , assetTypeId: string , isMaterial: boolean ): Promise<string> {
    return await grok.functions.call('RevvitySignalsLink:GetTerms', { fieldName, type, assetTypeId, isMaterial });
  }

  export async function entityTreeWidget(id: any ): Promise<any> {
    return await grok.functions.call('RevvitySignalsLink:EntityTreeWidget', { id });
  }
}
