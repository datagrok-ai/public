/**
This file is auto-generated by the grok api command.
If you notice any changes, please push them to the repository.
Do not edit this file manually.
*/
import * as grok from 'datagrok-api/grok';
import * as DG from 'datagrok-api/dg';


export namespace funcs {
  export async function benchlingLinkApp(): Promise<DG.View> {
    return await grok.functions.call('BenchlingLink:BenchlingLinkApp', {});
  }

  export async function benchlingLinkAppTreeBrowser(treeNode: any ): Promise<any> {
    return await grok.functions.call('BenchlingLink:BenchlingLinkAppTreeBrowser', { treeNode });
  }

  export async function getAASequences(sort: string | null, createdAt: string | null, modifiedAt: string | null, name: string | null, nameIncludes: string | null, aminoAcids: string | null, folderId: string | null, mentionedIn: string | null, projectId: string | null, registryId: string | null, schemaId: string | null, schemaFields: string | null, archiveReason: string | null, mentions: string | null, ids: string | null, entityRegistryIds_anyOf: string | null, names_anyOf: string | null, names_anyOf_caseSensitive: string | null, creatorIds: string | null, authorIds_anyOf: string | null, returning: string | null): Promise<DG.DataFrame> {
    return await grok.functions.call('BenchlingLink:GetAASequences', { sort, createdAt, modifiedAt, name, nameIncludes, aminoAcids, folderId, mentionedIn, projectId, registryId, schemaId, schemaFields, archiveReason, mentions, ids, entityRegistryIds_anyOf, names_anyOf, names_anyOf_caseSensitive, creatorIds, authorIds_anyOf, returning });
  }

  export async function getDNASequences(sort: string | null, createdAt: string | null, name: string | null, modifiedAt: string | null, nameIncludes: string | null, bases: string | null, folderId: string | null, mentionedIn: string | null, projectId: string | null, registryId: string | null, schemaId: string | null, schemaFields: string | null, archiveReason: string | null, mentions: string | null, ids: string | null, entityRegistryIds_anyOf: string | null, names_anyOf: string | null, names_anyOf_caseSensitive: string | null, creatorIds: string | null, authorIds_anyOf: string | null, returning: string | null): Promise<DG.DataFrame> {
    return await grok.functions.call('BenchlingLink:GetDNASequences', { sort, createdAt, name, modifiedAt, nameIncludes, bases, folderId, mentionedIn, projectId, registryId, schemaId, schemaFields, archiveReason, mentions, ids, entityRegistryIds_anyOf, names_anyOf, names_anyOf_caseSensitive, creatorIds, authorIds_anyOf, returning });
  }

  export async function getAssayResults(schemaId: string | null, createdAt_lt: string | null, createdAt_gt: string | null, createdAt_lte: string | null, createdAt_gte: string | null, minCreatedTime: number | null, maxCreatedTime: number | null, sort: string | null, entityIds: string | null, storageIds: string | null, assayRunIds: string | null, automationOutputProcessorId: string | null, ids: string | null, modifiedAt_lt: string | null, modifiedAt_gt: string | null, modifiedAt_lte: string | null, modifiedAt_gte: string | null, archiveReason: string | null): Promise<DG.DataFrame> {
    return await grok.functions.call('BenchlingLink:GetAssayResults', { schemaId, createdAt_lt, createdAt_gt, createdAt_lte, createdAt_gte, minCreatedTime, maxCreatedTime, sort, entityIds, storageIds, assayRunIds, automationOutputProcessorId, ids, modifiedAt_lt, modifiedAt_gt, modifiedAt_lte, modifiedAt_gte, archiveReason });
  }

  export async function getAssayRuns(schemaId: string | null, minCreatedTime: number | null, maxCreatedTime: number | null, ids: string | null): Promise<DG.DataFrame> {
    return await grok.functions.call('BenchlingLink:GetAssayRuns', { schemaId, minCreatedTime, maxCreatedTime, ids });
  }

  export async function createAASequence(name: string , aminoAcids: string , aliases: string | null, annotations: string | null, authorIds: string | null, customFields: string | null, fields: string | null, folderId: string | null, schemaId: string | null): Promise<DG.DataFrame> {
    return await grok.functions.call('BenchlingLink:CreateAASequence', { name, aminoAcids, aliases, annotations, authorIds, customFields, fields, folderId, schemaId });
  }

  export async function createDNASequence(name: string , bases: string , aliases: string | null, annotations: string | null, authorIds: string | null, customFields: string | null, fields: string | null, folderId: string | null, schemaId: string | null): Promise<DG.DataFrame> {
    return await grok.functions.call('BenchlingLink:CreateDNASequence', { name, bases, aliases, annotations, authorIds, customFields, fields, folderId, schemaId });
  }

  export async function createAssayResult(schemaId: string , fields: string | null, entityIds: string | null, storageIds: string | null, assayRunId: string | null, authorIds: string | null, customFields: string | null): Promise<DG.DataFrame> {
    return await grok.functions.call('BenchlingLink:CreateAssayResult', { schemaId, fields, entityIds, storageIds, assayRunId, authorIds, customFields });
  }

  export async function createAssayRun(schemaId: string , fields: string | null, name: string | null, authorIds: string | null, customFields: string | null): Promise<DG.DataFrame> {
    return await grok.functions.call('BenchlingLink:CreateAssayRun', { schemaId, fields, name, authorIds, customFields });
  }

  export async function getMolecules(sort: string | null, createdAt: string | null, modifiedAt: string | null, name: string | null, nameIncludes: string | null, folderId: string | null, mentionedIn: string | null, projectId: string | null, registryId: string | null, schemaId: string | null, schemaFields: string | null, archiveReason: string | null, mentions: string | null, ids: string | null, entityRegistryIds_anyOf: string | null, names_anyOf: string | null, authorIds_anyOf: string | null, chemicalSubstructure_mol: string | null, chemicalSubstructure_smiles: string | null): Promise<DG.DataFrame> {
    return await grok.functions.call('BenchlingLink:GetMolecules', { sort, createdAt, modifiedAt, name, nameIncludes, folderId, mentionedIn, projectId, registryId, schemaId, schemaFields, archiveReason, mentions, ids, entityRegistryIds_anyOf, names_anyOf, authorIds_anyOf, chemicalSubstructure_mol, chemicalSubstructure_smiles });
  }

  export async function createMolecule(name: string , smiles: string , formula: string | null): Promise<DG.DataFrame> {
    return await grok.functions.call('BenchlingLink:CreateMolecule', { name, smiles, formula });
  }

  export async function getProjects(sort: string | null, archiveReason: string | null, ids: string | null, name: string | null): Promise<DG.DataFrame> {
    return await grok.functions.call('BenchlingLink:GetProjects', { sort, archiveReason, ids, name });
  }

  export async function getPlates(sort: string | null, schemaId: string | null, schemaFields: string | null, createdAt: string | null, modifiedAt: string | null, name: string | null, nameIncludes: string | null, emptyPositions: number | null, emptyPositions_gte: number | null, emptyPositions_gt: number | null, emptyPositions_lte: number | null, emptyPositions_lt: number | null, emptyContainers: number | null, emptyContainers_gte: number | null, emptyContainers_gt: number | null, emptyContainers_lte: number | null, emptyContainers_lt: number | null, ancestorStorageId: string | null, storageContentsId: string | null, storageContentsIds: string | null, archiveReason: string | null, ids: string | null, barcodes: string | null, names_anyOf: string | null, names_anyOf_caseSensitive: string | null, returning: string | null, creatorIds: string | null): Promise<DG.DataFrame> {
    return await grok.functions.call('BenchlingLink:GetPlates', { sort, schemaId, schemaFields, createdAt, modifiedAt, name, nameIncludes, emptyPositions, emptyPositions_gte, emptyPositions_gt, emptyPositions_lte, emptyPositions_lt, emptyContainers, emptyContainers_gte, emptyContainers_gt, emptyContainers_lte, emptyContainers_lt, ancestorStorageId, storageContentsId, storageContentsIds, archiveReason, ids, barcodes, names_anyOf, names_anyOf_caseSensitive, returning, creatorIds });
  }

  export async function createPlate(name: string , schemaId: string , barcode: string | null, containerSchemaId: string | null, fields: string | null, parentStorageId: string | null, projectId: string | null, wells: string | null): Promise<DG.DataFrame> {
    return await grok.functions.call('BenchlingLink:CreatePlate', { name, schemaId, barcode, containerSchemaId, fields, parentStorageId, projectId, wells });
  }

  export async function getMixtures(sort: string | null, createdAt: string | null, modifiedAt: string | null, name: string | null, nameIncludes: string | null, folderId: string | null, mentionedIn: string | null, projectId: string | null, registryId: string | null, schemaId: string | null, schemaFields: string | null, archiveReason: string | null, mentions: string | null, ids: string | null, names_anyOf: string | null, names_anyOf_caseSensitive: string | null, entityRegistryIds_anyOf: string | null, ingredientComponentEntityIds: string | null, ingredientComponentEntityIds_anyOf: string | null, authorIds_anyOf: string | null): Promise<DG.DataFrame> {
    return await grok.functions.call('BenchlingLink:GetMixtures', { sort, createdAt, modifiedAt, name, nameIncludes, folderId, mentionedIn, projectId, registryId, schemaId, schemaFields, archiveReason, mentions, ids, names_anyOf, names_anyOf_caseSensitive, entityRegistryIds_anyOf, ingredientComponentEntityIds, ingredientComponentEntityIds_anyOf, authorIds_anyOf });
  }

  export async function createMixture(name: string , ingredients: string , schemaId: string , units: string , aliases: string | null, amount: string | null, authorIds: string | null, customFields: string | null, entityRegistryId: string | null, fields: string | null, folderId: string | null): Promise<DG.DataFrame> {
    return await grok.functions.call('BenchlingLink:CreateMixture', { name, ingredients, schemaId, units, aliases, amount, authorIds, customFields, entityRegistryId, fields, folderId });
  }

  export async function getDnaOligos(sort: string | null, createdAt: string | null, modifiedAt: string | null, name: string | null, nameIncludes: string | null, bases: string | null, folderId: string | null, mentionedIn: string | null, projectId: string | null, registryId: string | null, schemaId: string | null, schemaFields: string | null, archiveReason: string | null, mentions: string | null, ids: string | null, entityRegistryIds_anyOf: string | null, names_anyOf: string | null, names_anyOf_caseSensitive: string | null, creatorIds: string | null, authorIds_anyOf: string | null, returning: string | null, customNotationId: string | null): Promise<DG.DataFrame> {
    return await grok.functions.call('BenchlingLink:GetDnaOligos', { sort, createdAt, modifiedAt, name, nameIncludes, bases, folderId, mentionedIn, projectId, registryId, schemaId, schemaFields, archiveReason, mentions, ids, entityRegistryIds_anyOf, names_anyOf, names_anyOf_caseSensitive, creatorIds, authorIds_anyOf, returning, customNotationId });
  }

  export async function createDnaOligo(name: string , bases: string , aliases: string | null, annotations: string | null, authorIds: string | null, customFields: string | null, fields: string | null, folderId: string | null, schemaId: string | null, helm: string | null): Promise<DG.DataFrame> {
    return await grok.functions.call('BenchlingLink:CreateDnaOligo', { name, bases, aliases, annotations, authorIds, customFields, fields, folderId, schemaId, helm });
  }
}
