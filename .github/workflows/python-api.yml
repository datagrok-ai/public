name: Publish to PyPI

on:
  push:
    paths:
      - 'python-api/**'
  pull_request:
    paths:
      - 'python-api/**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install test dependencies
        working-directory: python-api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests and generate JUnit report
        working-directory: python-api
        run: |
          mkdir -p test-reports
          pytest tests --junitxml=test-reports/results.xml
      - name: Publish test results as GitHub annotations
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: python-api/test-reports/results.xml
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check version change
        id: check_version
        run: |
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(python -c "import tomli; print(tomli.load(open('python-api/pyproject.toml', 'rb'))['project']['version'])")
          
          # Get latest version from PyPI
          PYPI_VERSION=$(curl -s "https://pypi.org/pypi/datagrok-api/json" | python -c "import sys, json; print(json.load(sys.stdin)['info']['version'])")
          
          # Compare versions
          if [ "$CURRENT_VERSION" != "$PYPI_VERSION" ]; then
            echo "Version changed from $PYPI_VERSION to $CURRENT_VERSION"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged: $CURRENT_VERSION"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        if: steps.check_version.outputs.should_publish == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        if: steps.check_version.outputs.should_publish == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install hatch

      - name: Build package
        working-directory: python-api
        if: steps.check_version.outputs.should_publish == 'true'
        run: hatch build

      - name: Publish package
        if: steps.check_version.outputs.should_publish == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: python-api/dist/
